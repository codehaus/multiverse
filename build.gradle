allprojects {
  apply plugin: 'base'
  apply plugin: 'java'
  apply plugin: 'scala'
  apply plugin: 'maven'
  apply plugin: 'project-reports'

  install.dependsOn ':build'
  defaultTasks 'clean', 'install'

  sourceCompatibility = 1.6
  version = '0.5.3-SNAPSHOT'
  group = 'org.multiverse'
  //scalaVersion = '2.8.0.Beta1'
  scalaVersion = '2.7.7'

  //repository(url: 'dav:https://dav.codehaus.org/repository/multiverse/') 
  //{
  //	authentication(userName: "${username}", password: "${password}")
  //}

  //snapshotRepository(url:'dav:https://dav.codehaus.org/snapshots.repository/multiverse/') 
  //{
  //	authentication(userName: "${username}", password: "${password}")
  //} 

  def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

  repositories {
    mavenRepo urls: localMavenRepo
    mavenCentral()
    mavenRepo(urls: [
            'http://snapshots.repository.codehaus.org',
            'http://download.java.net/maven/2/',
            'https://maven.atlassian.com/content/groups/public'])
  }

  configurations {
    deployerJars
  }

  test {
    exclude("**/*AbstractTest*")
    exclude("**/*StressTest*")
    exclude("**/*LongTest*")
    exclude("**/*PerformanceTest*")
    exclude("**/*performanceTest*")
  }


  task integrationtest(type: Test) {
    include("**/*StressTest*")
    include("**/*stressTest*")
    include("**/*LongTest*")
    include("**/*longTest*")
  }

  dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.8.1'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.2'

    deployerJars "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"//, "org.apache.maven.wagon:wagon-webdav:1.0-beta-2"
  }

//  task uploadLibs {
//    uploadResolvers.addMavenDeployer('maven-deployer') {
//      uniqueVersion = false
//      addProtocolProviderJars(dependencies.resolve('deployerJars'))
//      repository(url: "dav:https://dav.codehaus.org/repository/multiverse/") {
//        authentication(userName: "bla", password: "bla")
//        releases()
//        snapshots()
//        proxy()
//      }
//      snapshotRepository(url: "dav:https://dav.codehaus.org/snapshots.repository/multiverse/") {
//        authentication(userName: "bla", password: "bla")
//        releases()
//        snapshots()
//        proxy()
//      }
//    }
//  }

//  task libs {
//    zip().fileSet(dir: 'build') {
//      include('**/*.dll')
//    }
//
//    zip(classifier: 'debug').fileSet(dir: 'build') {
//      include('**/*.dll')
//    }
//  }
}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-benchy') {
  dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: "1.4"
  }
}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-core') {

  configurations {
    testFixtures {
      extendsFrom testRuntime
    }
  }

  task testJar(type: Jar) {
    from sourceSets.test.classes
    classifier = 'test'
  }

  artifacts {
    testFixtures testJar
  }

}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-instrumentation') {
  configurations {
    testFixtures {
      extendsFrom testRuntime
    }
  }

  task testJar(type: Jar) {
    from sourceSets.test.classes
    classifier = 'test'
  }

  artifacts {
    testFixtures testJar
  }

  dependencies {
    compile project(':multiverse-core')
    compile group: 'args4j', name: 'args4j', version: "2.0.16"
    compile group: 'asm', name: 'asm-all', version: "3.2"
    testCompile project(path: ':multiverse-core', configuration: 'testFixtures')
  }
}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-core-tests') {
  dependencies {
    compile project(':multiverse-core')
    compile project(':multiverse-instrumentation')
    compile group: 'args4j', name: 'args4j', version: "2.0.16"
    compile group: 'asm', name: 'asm-all', version: "3.2"
    testCompile project(path: ':multiverse-core', configuration: 'testFixtures')
  }
}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-alpha-unborn') {

  configurations {
    testFixtures {
      extendsFrom testRuntime
    }
  }

  task testJar(type: Jar) {
    from sourceSets.test.classes
    classifier = 'test'
  }

  artifacts {
    testFixtures testJar
  }

   classes.doLast() {
    println "------------------------------------------------------------------"
    println "Creating temporary agent"
    println "------------------------------------------------------------------"

    def localRepo = "${gradle.gradleUserHomeDir}/cache/"

    ant.unzip(dest: "${buildDir}/classes/main",
            src: "${localRepo}/asm/asm-all/jars/asm-all-3.2.jar")
    ant.unzip(dest: "${buildDir}/classes/main",
            src: localRepo + 'args4j/args4j/jars/args4j-2.0.16.jar')
    
    ant.copy(todir: "${buildDir}/classes/main"){
            fileset(dir: "${projectRootDir}/multiverse-core/build/classes/main") 
    }
    
    ant.copy(todir: "${buildDir}/classes/main"){
            fileset(dir: "${projectRootDir}/multiverse-instrumentation/build/classes/main")
    }
 
    ant.delete(dir: "${buildDir}/classes/main/META-INF/")
    ant.mkdir(dir: "${buildDir}/classes/main/META-INF/")
    ant.copy(
            file: "${projectDir}/src/main/resources/MANIFEST.MF",
            todir: "${buildDir}/classes/main/META-INF")
    ant.zip(
            basedir: "${buildDir}/classes/main",
            destfile: "${buildDir}/libs/javaagent.jar") {
    }

    println "Finished creating tmp agent"
  }

  dependencies {
    compile project(':multiverse-core')
    compile project(':multiverse-instrumentation')
    compile group: 'args4j', name: 'args4j', version: "2.0.16"
    compile group: 'asm', name: 'asm-all', version: "3.2"
    testCompile project(path: ':multiverse-core', configuration: 'testFixtures')
    testCompile project(path: ':multiverse-instrumentation', configuration: 'testFixtures')
    testCompile project(':multiverse-benchy')
  }

  test {
    jvmArgs = ["-javaagent:${buildDir}/libs/javaagent.jar"]
  }
}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-alpha') {

  def localRepo = "${gradle.gradleUserHomeDir}/cache/"
  def projectRootDir = new File("${rootProject.projectDir}").absolutePath

 classes.doLast() {
    println "------------------------------------------------------------------"
    println "Extracting dependant jars and doing preinstrumentation"
    println "------------------------------------------------------------------"

    ant.unzip(dest: "${buildDir}/classes/main",
            src: localRepo + 'asm/asm-all/jars/asm-all-3.2.jar')
    ant.unzip(dest: "${buildDir}/classes/main",
            src: localRepo + 'args4j/args4j/jars/args4j-2.0.16.jar')

    ant.copy(todir: "${buildDir}/classes/main"){
            fileset(dir: "${projectRootDir}/multiverse-core/build/classes/main") 
    }
    ant.copy(todir: "${buildDir}/classes/main"){
            fileset(dir: "${projectRootDir}/multiverse-instrumentation/build/classes/main")
    }
    ant.copy(todir: "${buildDir}/classes/main"){
            fileset(dir: "${projectRootDir}/multiverse-alpha-unborn/build/classes/main")
    }

    ant.delete(file: "${buildDir}/classes/main/GiveMavenSomethingToCompile.class")

    ant.java(classname: "org.multiverse.compiler.MultiverseCompiler") {
      arg value: '-o'
      arg value: '-v'
      arg value: '-d'
      arg value: "${buildDir}/classes/main"

      classpath {
        pathelement(
                location: "${projectRootDir}/multiverse-core/build/libs/multiverse-core-${project.version}.jar")
        pathelement(
                location: "${projectRootDir}/multiverse-instrumentation/build/libs/multiverse-instrumentation-${project.version}.jar")
        pathelement(
                location: "${projectRootDir}/multiverse-alpha-unborn/build/libs/multiverse-alpha-unborn-${project.version}.jar")
        pathelement(
                location: "${localRepo}/args4j/args4j/jars/args4j-2.0.16.jar")
        pathelement(
                location: "${localRepo}/asm/asm-all/jars/asm-all-3.2.jar")
      }
    }
  }

  testClasses.doLast() {
    println "------------------------------------------------------------------"
    println "Extracting the test files"
    println "------------------------------------------------------------------"

    ant.mkdir dir: "${buildDir}/classes/test"

    ant.copy(todir: "${buildDir}/classes/test"){
	fileset(dir: "${projectRootDir}/multiverse-core/build/classes/test")
    }
    ant.copy(todir: "${buildDir}/classes/test"){
        fileset(dir: "${projectRootDir}/multiverse-alpha-unborn/build/classes/test")
    }
    
    ant.delete file:("${buildDir}"+'/classes/test/org/multiverse/stms/alpha/instrumentation/fieldaccess/TransactionalMethod_InterruptibleTest.class')
    ant.delete file:("${buildDir}"+'/classes/test/org/multiverse/stms/alpha/instrumentation/fieldaccess/TransactionalMethod_InterruptibleTest$MethodWithoutException.class')
    ant.delete file:("${buildDir}"+'/classes/test/org/multiverse/stms/alpha/instrumentation/fieldaccess/TransactionalMethod_InterruptibleTest$MethodWithIncorrectException.class')
    ant.delete file:("${buildDir}"+'/classes/test/org/multiverse/stms/alpha/instrumentation/fieldaccess/TransactionalObject_ClashingFieldAndMethodTest.class')
    ant.delete file:("${buildDir}"+'/classes/test/org/multiverse/stms/alpha/instrumentation/fieldaccess/TransactionalObject_ClashingFieldAndMethodTest$ObjectWithClashingMethod.class')

    ant.java(classname: "org.multiverse.compiler.MultiverseCompiler") {
      arg value: '-o'
      arg value: '-v'
      arg value: '-d'
      arg value: "${buildDir}/classes/test"

      classpath {
        pathelement(
                location: "${projectRootDir}/multiverse-core/build/libs/multiverse-core-${project.version}.jar")
        pathelement(
                location: "${projectRootDir}/multiverse-instrumentation/build/libs/multiverse-instrumentation-${project.version}.jar")
        pathelement(
                location: "${projectRootDir}/multiverse-alpha-unborn/build/libs/multiverse-alpha-unborn-${project.version}.jar")
        pathelement(
                location: localRepo + 'args4j/args4j/jars/args4j-2.0.16.jar')
        pathelement(
                location: localRepo + 'asm/asm-all/jars/asm-all-3.2.jar')
      }
    }
  }

  jar.doLast() {
    println "------------------------------------------------------------------"
    println "Integrating dependencies in final jar"
    println "------------------------------------------------------------------"

    ant.taskdef(name: 'jarjar',
            classname: 'com.tonicsystems.jarjar.JarJarTask',
            classpath: "${localRepo}/com.tonicsystems.jarjar/jarjar/jars/jarjar-1.0-rc8.jar")

    ant.jarjar(jarfile: "${projectRootDir}/multiverse-alpha/build/libs/multiverse-alpha-${project.version}.jar", update: true) {
      rule pattern: 'org.objectweb.asm.**', result: 'org.multiverse.repackaged.@0'
      rule pattern: 'org.kohsuke.args4j.**', result: 'org.multiverse.repackaged.@0'
    }
  }

  dependencies {
    compile project(':multiverse-core')
    compile project(':multiverse-instrumentation')
    compile project(':multiverse-alpha-unborn')
    compile group: 'args4j', name: 'args4j', version: "2.0.16"
    compile group: 'asm', name: 'asm-all', version: "3.2"
    compile group: 'com.tonicsystems.jarjar', name: 'jarjar', version: "1.0-rc8"
    testCompile project(path: ':multiverse-core', configuration: 'testFixtures')
    testCompile project(path: ':multiverse-instrumentation', configuration: 'testFixtures')
    testCompile project(path: ':multiverse-alpha-unborn', configuration: 'testFixtures')
    testCompile project(':multiverse-benchy')
  }
}

// ------------------------------------------------------------------------------------------------------------------

project(':multiverse-scala') {
  repositories {
    mavenRepo urls: 'http://scala-tools.org/repo-releases/'
  }

  dependencies {
    // Libraries needed to run the scala tools
    scalaTools "org.scala-lang:scala-compiler:${scalaVersion}"
    scalaTools "org.scala-lang:scala-library:${scalaVersion}"
    // Libraries needed for scala api
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile project(':multiverse-core')
    compile project(':multiverse-instrumentation')
    compile project(':multiverse-alpha-unborn')
    testCompile group: 'org.scalatest', name: 'scalatest', version: '1.0'
  }
}

project(':multiverse-performance-tool') {

  dependencies {
    compile group: 'args4j', name: 'args4j', version: "2.0.16"
  }
}

project(':multiverse-manual') {
//   usePlugin 'monkeymachine.gradle:gradle-docbook:0.1-SNAPSHOT' 
}
