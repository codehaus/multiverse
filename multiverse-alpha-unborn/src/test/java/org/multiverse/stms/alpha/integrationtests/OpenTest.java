package org.multiverse.stms.alpha.integrationtests;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.multiverse.annotations.TransactionalMethod;
import org.multiverse.stms.alpha.AlphaStm;
import org.multiverse.stms.alpha.AlphaTranlocal;
import org.multiverse.stms.alpha.AlphaTransactionalObject;
import org.multiverse.stms.alpha.transactions.AlphaTransaction;
import org.multiverse.transactional.DefaultTransactionalReference;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.multiverse.api.GlobalStmInstance.getGlobalStmInstance;
import static org.multiverse.api.ThreadLocalTransaction.getRequiredThreadLocalTransaction;
import static org.multiverse.api.ThreadLocalTransaction.setThreadLocalTransaction;

public class OpenTest {

    private AlphaStm stm;
    private static DefaultTransactionalReference<Integer> ref;

    @Before
    public void setUp() {
        setThreadLocalTransaction(null);
        stm = (AlphaStm) getGlobalStmInstance();
        ref = new DefaultTransactionalReference<Integer>(0);
    }

    @After
    public void tearDown() {
        setThreadLocalTransaction(null);
    }

    @Test
    public void testOpenForWrite() {
        executeUpdate();
    }

    @TransactionalMethod
    public static void executeUpdate() {
        AlphaTransaction t = (AlphaTransaction) getRequiredThreadLocalTransaction();
        AlphaTranlocal tranlocal = t.openForWrite(((AlphaTransactionalObject) ((Object) ref)));
        assertTrue(tranlocal.isUncommitted());
        assertEquals(0, (int) ref.get());
    }

    @Test
    public void testOpenForRead() {
        executeReadonly();
    }

    @TransactionalMethod(readonly = true)
    public static void executeReadonly() {
        AlphaTransaction t = (AlphaTransaction) getRequiredThreadLocalTransaction();
        AlphaTranlocal tranlocal = t.openForRead(((AlphaTransactionalObject) ((Object) ref)));
        assertEquals(0, (int) ref.get());
    }
}
