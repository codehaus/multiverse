package org.multiverse.instrumentation.compiler;

import java.io.File;

/**
 * The ClazzCompiler is responsible transforming a Clazz.
 * <p/>
 * The same clazzCompiler can be used for compiletime instrumentation and loadtime instrumentation,
 * so no worries about that anymore.
 *
 * @author Peter Veentjer
 */
public interface ClazzCompiler {

    /**
     * Returns the name of this ClazzCompiler. Needed for identification and logging
     * purpuses.
     *
     * @return the name of this ClazzCompiler.
     * @see #getCompilerVersion()
     */
    String getCompilerName();

    /**
     * Returns the version of this ClazzCompiler. Needed for identification and
     * logging purposes.
     *
     * @return the version of this ClazzCompiler.
     * @see #getCompilerName()
     */
    String getCompilerVersion();

    /**
     * Returns the name of the Stm this ClazzCompiler is going to do the instrumentation
     * for. It is purely used for debugging/logging purposes.
     *
     * @return the name of the Stm
     */
    String getStmName();

    /**
     * Sets the Filer for this ClazzCompiler. The Filer can be used to do callbacks for
     * creating additional resources like classes.
     *
     * @param filer the filer this ClazzCompiler is going to use.
     */
    void setFiler(Filer filer);


    void setResolver(Resolver resolver);

    /**
     * If the bytecode generated by this ClazzCompiler should be dumped for debugging
     * purposes.
     *
     * @param dumpBytecode true if bytecode should be dumpted.
     * @see #setDumpDirectory(java.io.File)
     */
    void setDumpBytecode(boolean dumpBytecode);

    /**
     * Sets the location of this ClazzCompiler. The default is the tmp directory so
     * in most cases you don't need to worry about this property.
     *
     * @param dumpDirectory
     */
    void setDumpDirectory(File dumpDirectory);

    /**
     * Sets the Log this ClazzCompiler uses to execute log statements on.
     * <p/>
     * So if you want to have verbose output, just plug in some logger.
     *
     * @param logger
     */
    void setLog(Log logger);

    /**
     * Add a pattern that is included. Default everything is included, unless it is explicitly
     * excluded. The pattern is just the
     *
     * @param included
     */
    void addIncluded(String included);

    void addExcluded(String ignored);

    /**
     * Processes a clazz. If nothing needs to be processed, the provided clazz can be returned. The return
     * value should never be null.
     *
     * @param originalClazz the Clazz to transform.
     * @return the transformed clazz. If extra classes need to be generated, they are created using the Filer.
     * @throws CompileException if something goes wrong while compile clazz.
     */
    Clazz process(Clazz originalClazz);
}
