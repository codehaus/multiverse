package org.multiverse.stms.beta;

import org.multiverse.api.*;
import org.multiverse.api.closures.*;
import org.multiverse.api.exceptions.*;
import static org.multiverse.api.ThreadLocalTransaction.*;

public class BetaOrElseBlock implements OrElseBlock{

#foreach($closure in $closures)

    @Override
    public ${closure.typeParameter} ${closure.type} execute(${closure.name}${closure.typeParameter} either, ${closure.name}${closure.typeParameter} orelse){
        try{
#if(${closure.type} eq 'void')
            executeChecked(either,orelse);
            return;
#else
            return executeChecked(either,orelse);
#end
        }catch(RuntimeException e){
            throw e;
        }catch(Exception e){
            throw new InvisibleCheckedException(e);
        }
    }

    @Override
    public ${closure.typeParameter} ${closure.type} executeChecked(${closure.name}${closure.typeParameter} either, ${closure.name}${closure.typeParameter} orelse)throws Exception{
        if(either == null){
            throw new NullPointerException("either closure can't be null");
        }

        if(orelse == null){
            throw new NullPointerException("orelse closure can't be null");
        }

        Transaction tx = getThreadLocalTransaction();

        if(tx == null){
            throw new TransactionRequiredException("No transaction is found, but one is required for the orelse");
        }

        try{
#if(${closure.type} eq 'void')
            either.execute(tx);
            return;
#else
            return either.execute(tx);
#end
        }catch(Retry retry){
#if(${closure.type} eq 'void')
            orelse.execute(tx);
            return;
#else
            return orelse.execute(tx);
#end
        }
    }
#end
}