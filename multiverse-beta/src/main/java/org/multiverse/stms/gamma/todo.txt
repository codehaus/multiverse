--------------------------------------------------------------------
                        to do
--------------------------------------------------------------------

- commute: while commuting, no transaction accessed allowed.

- listeners

- permanent listeners

- pre/post start listeners and fat gamma block

- commute and locking

- optimize the tx-pool logic (instead of using an array, use a single linked list)..
transactions can also act as node (no need to introduce additional datastructures).

- fast 'write' on orec.depart when exclusive lock and no surplus

- fast readset validation on committing transaction if the conflict counter has not changed
needs more research.

- stripe of conflict counters.

- testing: atomic change operations and globalconflictcounter increment
    - intref
    - booleanref
    - longref
    - doubleref
    - def

- local conflict counter should be set if needed when the flatten commute is called.

- improved testing for the repeatable read isolation level

- adding read committed isolation level

- lean transaction and readonly? no checking is done but what if configured as readonly

- orelse

- implement the read committed isolation level

- GammaRef_atomicGetAndSetTest

- GammaRef_atomicAlterAndGetTest

- GammaRef_atomicGetAndAlterTest

- GammaRef_commuteTest

- GammaRef_getAndAlterTest

- Lock.acquire0Test

- Lock_getLockMode0Test



--------------------------------------------------------------------
                        done
--------------------------------------------------------------------
- remove duplication from the openForWrite (should do the loading part by the openForRead and add additional
checks itself).

- try locking was removed (moved to 0.8).

- ensure now also is part of the speculative stuff.
