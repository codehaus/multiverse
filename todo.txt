---------------------------------------------------------------
todo engine
---------------------------------------------------------------

- AlphaProgrammaticLong.atomic methods should use the backoff policy

- AlphaProgrammaticLong.atomic method should use the LockPolicy to do locking

- if a good transaction is available, it should be reused.

- support for a history in the ProgrammaticReference

- support for a history in the ProgrammaticLong

- back off policy needs to be used when a load is done

- make sure that load still succeeds if the value is locked, but the current value
still has the expected value.

- threadsafety of the java agent fucntionality; classes can be created by different
threads, so the whole mechanism should be made thread safe.

- expose dirty check in transaction factory builder

- version should start with 0 again; so all other status should shift one down.

- back off policy needs to be used when atomic calls are done

- AlphaProgrammaticLong atomicGetVersion

- AlphaProgrammaticLong. getVersion

- AlphaProgrammaticLong. read+version atomically

- AlphaProgrammaticLong that sets if the version of the value still is correct

- AlphaProgrammaticLong.getVersion(Transaction tx)

- AlphaProgrammaticReference. read+version atomically

- AlphaProgrammaticLong.getOrAwait

- AlphaProgrammaticReference that sets if the version of the value still is correct

- MapUpdateTransaction: when a read is done on a commuting object

- MapUpdateTransaction: when a write is done on a commuting object

- ArrayUpdateTransaction: when a read is done on a commuting object

- ArrayUpdateTransaction: when a write is done on a commuting object

- MonoUpdateTransaction: when a read is done on a commuting object

- MonoUpdateTransaction: when a write is done on a commuting object

- inline getters and setters for transactional objects

- cheapen tranlocal access inside methods for the 'this' variable

- cheapen tranlocal access for the this variable by passing that tranlocal
  if possible. First step: only needs to be done in methods in the same class

- cheapen tranlocal access for the this variable by passing that tranlocal
  if possible. First step 2: also for other classes.

- Fix test for AlphaProgrammaticLong

- Fix tes for AlphaProgrammaticReference

- static compilation

- AlphaProgrammaticReferenceFactory.atomicCreateLong

- AlphaProgrammaticReferenceFactory.atomicCreateReference

- AlphaProgrammaticReferenceFactoryBuilder

- AlphaProgrammaticReferenceFactoryBuilder.withAbaDetection

- AlphaProgrammaticReferenceFactoryBuilder.withBlockingSupport

- AlphaProgrammaticLong should use the stm for all its operations once it has
been build using that stm.

- AlphaProgrammaticReference should use the stm for all its operations once
it has been build using that stm.

- balancing of the treemap

- interface parameter inheritance.

---------------------------------------------------------------
todo unclear
---------------------------------------------------------------

- tests that use different transaction size to cause all transaction implementations to be used

- rethink about the or-else. There is no need to create a snapshot, but it can be used for nested transactions.

    - FixedTrackingUpdateAlphaTransaction and support for 'orelse'

     - TinyTrackingUpdateTransaction and support for orelse

     - TinyTrackingReadonlyTransaction and support for orelse

     - GrowingTrackingReadonlyTransaction and support for orelse


- make sure (using bug shaker) that the registration of the listener contains no
concurrency problem. I think it is possible that there are pending

- class hierarchy of recoverableexceptions is strange (retry and transactiontoosmall are recoverable but don't
implement this interface)

- debug information for the atomic object is lost somehow:
org.multiverse.api.exceptions.ReadonlyException
	at org.multiverse.stms.alpha.transactions.readonly.NonTrackingReadonlyAlphaTransaction.doAbortAndRegisterRetryLatch(NonTrackingReadonlyAlphaTransaction.java:166)
	at org.multiverse.stms.AbstractTransaction.abortAndRegisterRetryLatch(AbstractTransaction.java:214)
	at org.multiverse.transactional.primitives.TransactionalInteger.await(IntegerRef.java)
	at org.multiverse.integrationtests.notification.PingPongLongTest$PingPongThread.doRun(PingPongLongTest.java:75)
	at org.multiverse.TestThread.run(TestThread.java:44)
Thread PingPongThread-1 has thrown an exception

- logging

    - logging should be re-enabled but not with a subclass

    - logging configurable through annotations?

- support subclassing in instrumentation

    - tranlocal snapshot needs to be fixed for subclassing.

- logging on transactions should be configurable

- Test 'assertAllMethodsAreCopied' incomplete in file 'AtomicMethod_FastAtomicObjectMixinTest.java' at line 60

- Test 'test' incomplete in file 'CigaretteSmokersProblemSimplifiedTest.java' at line 51

- CigaretteSmokersProblemSimplifiedTest

- primitive refs should also have their waiting methods checked.

---------------------------------------------------------------
todo features
---------------------------------------------------------------

- optimizations

    - test: the transaction call from another transaction call lifting method optimization

    - test: different situations for the transactionalmethod->transactionalmethod call.

    - GET_FIELD for tranlocal should use the tranlocal field

    - PUT_FIELD for the tranlocal should use the tranlocal field

    - when a loadForWrite is done, a check needs to be done if the current tranlocal is committed. If it is, it
    should be replaced by the updatable version.


- timeout op de transaction through annotations

- locking

    - transaction with only fresh objects doesnt need to increase the version, or
    lock/unlock.

- profiler

    - profiler should be added to the abstract transaction config

    - profiler statements of the abstract transaction should be added.

- retry policy should be configurable through annotation

- blocking executor.

- inlining of transactions

- when instrumentation fails, instead of continuing with the process, reinstrument the classes so that
 they always throw an error. Remove all fields/methods?

- GlobalStmInstance test

- performance test with readonly and update transaction that only do reads.

- todo:
   measure avarage locking tim with and without this (late wakening).

- bug shaker inbouwen

- work with a debug flag the enables exception reuse generally?

- a transaction that only does no updates but insert instead: does this transactionneed to increase
the clock?

- history for stale objects

- dynamic history length for history; start with a zero history and once there is a loadtoooldversion,
start maintaining history. Increase the history as long as you get loadtoooldversions.

- customizable contention managers

- pessimistic online locking

- nested transactions

- SkipList

- Tree

- Growing Array List

- via een system property aangeven welke mixin gebruikt moet worden

- het inlezen van de mixin hoeft niet iedere keer te gebeuren, maar
  kan eenmalig gedaan worden.

    - problem: the classnode of the mixin is modified atm, so can't be reused. This modification
    should be removed, or it is not possible to reuse the classnode and it needs to be read again and again

- more complex cycle test with collections that have references to each other.

- a selector for transactions to make non blocking transaction processing possible, using more transactions
than threads. Just like non blocking io.

- on instance level control on the length of history; if load fails because no history can be found, \
increase the length of the history to main and retry the transaction.

- propagation support

- a better way to run the tests of the stm dependant packages in the core package. Atm
they are moved to the alpha package, so they have an stm to be tested against.

- when a field access is done without a transaction, throw an error that contains the class/field

- exceptions thrown in the fastmixin doen't show transaction

- let the JavaAgent print the revision of subversion & the release version; this helps to locate problems.

- stress test for strictlinkedblockingdeque

---------------------------------------------------------------
idea:
---------------------------------------------------------------

- tx reuse? So if an aborted or committed transaction is found and a new tx needs to start,
could this old tx be reused? 

- a tranlocal that can't be used for listening to; causes less space, but also reduces
stress on the memory bus because of no reads need to be done on the listeners (no
reads and no writes)/

- profile: number of retries needed for a transaction to complete.

- when a test fails, the report should be stored somewhere so that it won't be lost when
clean is done.

- instead of having a locked bit, the tranlocal could have access to the transaction. Once committed,
this reference can be set to null. Can also be used for detecting if a tranlocal can in from a different
transaction.

- provide as much as possible to point to failures in the byteocode (missing
parts for example) which class/method it was.. for debugging purposes of course

- a performance test comparing the 'managed ref' approach vs the full blown multiverse approach.

- a performance comparison between 'uninstrumented' code and instrumented code.

- a performance comparison between profiled and unprofiled code.

- statistics about number of loads that could get information from the transaction instead
of loading from main memory. This is also needed for optimizing bytecode.

- could the abort and retry mechanism be implemented more efficiently? Atm the whole transaction
is aborted and the complete transaction needs to be re-done. A more efficient implemention could block
and wait until a write has happened on some field and continue with the operation, just like a classic
wait/notify.

- more efficient wait/notify: for example the balancedtree and sleeping for a specific key. Atm
all objects loaded by a transaction are a reason to wake up (cause a change happens on them). But
what if you are only interested in a specific field... this could reduce the stress on the mechanism

- door onderscheid te maken tussen attachednew en loaded, zou je eventueel nog optimalisaties kunnen doen:
     - op nieuw objecten hoef je geen lock aan te vragen
     - op nieuw objecten hoef je niet te valideren
     - op nieuw objecten hoef je geen lock te releasen
     - op nieuw objecten hoef je je niet druk te maken over retrylisteners

- online pessimistic locking

- bloomfilter

- abort silently

- ipv de cheap latch zou je ook de monitor lock van de transactie kunnen gebruiken.
Dit scheelt nog een object creatie.

- timeout tijd.. spaarrekening waar je iedere keer vanaf kunt boeken.

- de timeout tijds op de locks zetten

- managed ref annotation: by setting a ref, you don't force an object to an atomic object
but a normal object using a managed ref.

- shake out concurrency bugs

    - insert random delays in the fastatomicobject

    - insert random delays in alphaupdatetransaction

    - insert random delays in alphareadonlytransaction

    - rerun tests with the bug shakers on

- should the locks be released when the write is done, or should the locks be released
  when the all the writes have been done. Normally this would not be an issue, but there are
  problems when atomic objects refer to other atomic objects that have not been written. In
  these cases you could run into a loadexception

---------------------------------------------------------------
done
---------------------------------------------------------------

- good working default transaction familyname added.

- all readonly tests up and running again

- AlphaProgrammaticLong.atomicSet(long newValue

- AlphaProgrammaticLong.atomicCompareAndSet(long expected, long update)

- AlphaProgrammaticLong.atomicGet 

- AlphaProgrammaticLong.set test

- Templates need to be removed in constructors of AlphaProgrammaticLong

- AlphaProgrammaticLong. atomicInc(long amount)

