---------------------------------------------------------------
todo engine
---------------------------------------------------------------

- integration tests should be fixed

- fix style guide css

- convert manual from html to docbook

- generate manual from gradle

- logging on transactions should be configurable

- improved clock

- ArrayList:

    - public ListIterator<E> listIterator()

    - public ListIterator<E> listIterator(int index)

    - List<E> subList(int fromIndex, int toIndex)

- TransactionalLinkedList

    - ListIteratorImpl

    - boolean removeFirstOccurrence(Object o)

    - boolean removeLastOccurrence(Object o)

- TransactionalTreeMap

    - balancing of the treemap

        - big performance problem

        - deletion of nodes

    - public boolean replace(K key, V oldValue, V newValue)

    - public Set<Entry<K, V>> entrySet()

    - public String toString()

- 'mod' support for iterators.

- update tests tests that the backoff policy is used when a openForUpdate is done.

- VetoCommitBarrier_vetoCommitWithTransactionTest fails sometimes.

CountDownCommitBarrier_joinCommitUninterruptiblyWithTransactionTest.whenTransactionFailsToPrepare - Done

CountDownCommitBarrier_joinCommitUninterruptiblyWithTransactionTest.whenStartingInterrupted - Done

CountDownCommitBarrier_tryAwaitOpenUninterruptiblyTest.whenInterruptedWhileWaiting - Done

CountDownCommitBarrier_tryAwaitOpenUninterruptiblyTest.whenAbortedWhileWaiting

CountDownCommitBarrier_tryAwaitOpenUninterruptiblyTest.whenTimeout

CountDownCommitBarrier_tryJoinCommitTest.whenOpenAndTransactionCommitted_thenIllegalStateException

CountDownCommitBarrier_tryJoinCommitTest.whenOpenAndTransactionAborted_thenIllegalStateException

CountDownCommitBarrier_tryJoinCommitWithTimeoutTest.whenNotLastOne

CountDownCommitBarrier_tryJoinCommitWithTimeoutTest.whenInterruptedWhileWaiting

CountDownCommitBarrier_tryJoinCommitWithTimeoutTest.whenTimeout

CountDownCommitBarrier_tryJoinCommitWithTimeoutTest.whenAbortedWhileWaiting

VetoCommitBarrier_tryJoinCommitTest.whenOpenAndTransactionPrepared_then

VetoCommitBarrier_tryJoinCommitTest.whenOpenAndTransactionCommitted_then

VetoCommitBarrier_tryJoinCommitTest.whenOpenAndTransactionAborted_then

AbstractTransaction_abortTest.whenDoAbortThrowsError

GenericCommitLockPolicyTest

GenericCommitLockPolicyTest

GenericCommitLockPolicyTest

GenericCommitLockPolicyTest

NonBlockingTaskThreadPoolExecutor_integrationTest.test

TransactionalThreadPoolExecutor_awaitTerminationTest.whenShutdown

TransactionalThreadPoolExecutor_setCorePoolSizeTest.whenPoolSizeIncreased

TransactionalArrayList_addAll2Test.whenAddedInFront

TransactionalArrayList_addAll2Test.whenAddedToEnd

TransactionalArrayList_addAll2Test.whenAddedInBetween

TransactionalArrayList_listIterator1Test

TransactionalArrayList_listIteratorTest

TransactionalArrayList_sublistTest

TransactionalLinkedList_ClassStructureTest

- commuting write and open for read; if non automatic read tracking then
it will not be fixated.

- tests that use different transaction size to cause all transaction implementations to be used

- debug information for the atomic object is lost somehow:
org.multiverse.api.exceptions.ReadonlyException
	at org.multiverse.stms.alpha.transactions.readonly.NonTrackingReadonlyAlphaTransaction.doAbortAndRegisterRetryLatch(NonTrackingReadonlyAlphaTransaction.java:166)
	at org.multiverse.stms.AbstractTransaction.abortAndRegisterRetryLatch(AbstractTransaction.java:214)
	at org.multiverse.transactional.primitives.TransactionalInteger.await(IntegerRef.java)
	at org.multiverse.integrationtests.notification.PingPongLongTest$PingPongThread.doRun(PingPongLongTest.java:75)
	at org.multiverse.TestThread.run(TestThread.java:44)
Thread PingPongThread-1 has thrown an exception

- Test 'assertAllMethodsAreCopied' incomplete in file 'AtomicMethod_FastAtomicObjectMixinTest.java' at line 60

- Test 'test' incomplete in file 'CigaretteSmokersProblemSimplifiedTest.java' at line 51

- primitive refs should also have their waiting methods checked.

- is it possible to see the test output, especially for the integration test this is important to provide
feedback what is happening.

- gradle: have some kind of report that indicates which test failed instead of looking at the html
generated test report.

- instrumentation

    - upgrade get-field access to use frames instead of copying/swapping etc

    - upgrade put-field access to use frames instead of copying/swapping etc

    - static compilation

        - integration test of the compiler in combination with
        the java agent.

        - instrumented jar test

    - inlining

        - setter should be able to deal with returning old value

        - inlining transaction in transactional getter

        - inlining transaction in transactional setter

- interface parameter inheritance.

- ProgrammaticLong is not seen as transactional

- ProgrammaticReference is not seen as transactional

- speculative atomic methods; at the moment only get/set can be made atomic but more complex methods can't.
So enhance the speculative mechanism and the instrumentation so that methods start with the atomic mode.

- version should start with 0 again; so all other status should shift one down.

- AlphaProgrammaticLong.getOrAwait

- more complex cycle test with collections that have references to each other.

- a better way to run the tests of the stm dependant packages in the core package. Atm
they are moved to the alpha package, so they have an stm to be tested against.

- exceptions thrown in the fastmixin doen't show transaction

- stress test for strictlinkedblockingdeque

- site needs to be generated from gradle

- publish snapshot artifacts from gradle to codehaus

- publish real artifacts from gradle to codehaus

- upload site from gradle to codehaus

- upload reports from gradle to codehaus

- multiverse-scala compile project

- group javadoc: question on gradle site pending

- make it possible that stresstests can be configured on the outside to execute for a different amount of time.

- debug information is lost in transactional method (no visible in stacktrace)

- log the controlflowexceptions; configurable from annotations and transactionfactorybuilder.

- als een transactie geen dirty checks nodig heeft, dan automatisch ieder object dat gelezen is,
kan met een dirty tag

       TransactionalTreeMap_StressTest

       TransactionalTreeMap_containsValueTest

       TransactionalTreeMap_entrySetTest

       TransactionalTreeMap_equalsTest

       TransactionalTreeMap_getTest.whenKeyIsRoot

       TransactionalTreeMap_hashCodeTest

       TransactionalTreeMap_keySetTest

       TransactionalTreeMap.whenOneOfTheKeysContainsNull

       TransactionalTreeMap_putIfAbsentTest.test

       TransactionalTreeMap_remove1Test

       TransactionalTreeMap_remove2Test

       TransactionalTreeMap_replace3Test

       TransactionalTreeMap_toStringTest

       TransactionalTreeMap_valuesTest

       TransactionalTreeSet_StressTest

       TransactionalTreeSet_equalsTest

       TransactionalTreeSet_hashCodeTest

       TransactionalTreeSet_iteratorTest

       TransactionalTreeSet_removeAllTest

       TransactionalTreeSet_removeTest.whenSetEmpty_thenReturnFalse

       TransactionalTreeSet_removeTest.whenItemNotFound_thenNoChange

       TransactionalTreeSet_removeTest.whenItemFound_thenRemoved

       TransactionalTreeSet_retainAllTest.

       TransactionalTreeSet_toArray0Test

       TransactionalTreeSet_toArray1Test

       TransactionalTreeSet_toStringTest
       
---------------------------------------------------------------
idea:
---------------------------------------------------------------

- the version in the AlphaInstrumentor needs to be modified by maven instead of manually

- customizable contention managers

- pessimistic online locking

- a selector for transactions to make non blocking transaction processing possible, using more transactions
than threads. Just like non blocking io.

- propagation support

- when class definition is loaded, display it in the output.

 - maven plugin for the compiler

- support subclassing in instrumentation

    - tranlocal snapshot needs to be fixed for subclassing.

- continuation when a backoff needs to be done or when a transaction needs to block?

- a tranlocal that can't be used for listening to; causes less space, but also reduces
stress on the memory bus because of no reads need to be done on the listeners (no
reads and no writes)/

- when a test fails, the report should be stored somewhere so that it won't be lost when
clean is done.

- provide as much as possible to point to failures in the byteocode (missing
parts for example) which class/method it was.. for debugging purposes of course

- a performance comparison between 'uninstrumented' code and instrumented code.

- statistics about number of loads that could get information from the transaction instead
of loading from main memory. This is also needed for optimizing bytecode.

- could the abort and retry mechanism be implemented more efficiently? Atm the whole transaction
is aborted and the complete transaction needs to be re-done. A more efficient implemention could block
and wait until a write has happened on some field and continue with the operation, just like a classic
wait/notify.

- more efficient wait/notify: for example the balancedtree and sleeping for a specific key. Atm
all objects loaded by a transaction are a reason to wake up (cause a change happens on them). But
what if you are only interested in a specific field... this could reduce the stress on the mechanism

- online pessimistic locking

- bloomfilter

- ipv de cheap latch zou je ook de monitor lock van de transactie kunnen gebruiken.
Dit scheelt nog een object creatie.

- shake out concurrency bugs

    - insert random delays in the fastatomicobject

    - insert random delays in alphaupdatetransaction

    - insert random delays in alphareadonlytransaction

    - rerun tests with the bug shakers on

- performance test with readonly and update transaction that only do reads.

-   measure avarage locking time with and without this (late wakening).

- profiler

    - profiler should be added to the abstract transaction config

    - profiler statements of the abstract transaction should be added.

- retry policy should be configurable through annotation

- blocking executor.

- inlining of transactions

- support for a history in the ProgrammaticReference

- support for a history in the ProgrammaticLong

- SkipList

- via een system property aangeven welke mixin gebruikt moet worden

- het inlezen van de mixin hoeft niet iedere keer te gebeuren, maar
  kan eenmalig gedaan worden.

    - problem: the classnode of the mixin is modified atm, so can't be reused. This modification
    should be removed, or it is not possible to reuse the classnode and it needs to be read again and again

- rethink about the or-else. There is no need to create a snapshot, but it can be used for nested transactions.

    - FixedTrackingUpdateAlphaTransaction and support for 'orelse'

     - TinyTrackingUpdateTransaction and support for orelse

     - TinyTrackingReadonlyTransaction and support for orelse

     - GrowingTrackingReadonlyTransaction and support for orelse

- make sure (using bug shaker) that the registration of the listener contains no
concurrency problem. I think it is possible that there are pending

- when a field access is done without a transaction, throw an error that contains the class/field

- work with a debug flag the enables exception reuse generally?

- history for stale objects

- dynamic history length for history; start with a zero history and once there is a loadtoooldversion,
start maintaining history. Increase the history as long as you get loadtoooldversions.

- when instrumentation fails, instead of continuing with the process, reinstrument the classes so that
 they always throw an error. Remove all fields/methods?

---------------------------------------------------------------
done
---------------------------------------------------------------

- if a good transaction is available, it should be reused.

- includes/exclude functionality on the javaagent

