- fast 'write' on orec.depart when exclusive lock and no surplus

- fast readset validation on committing transaction if the conflict counter has not changed
needs more research.

- stripe of conflict counters.

- optimize the tx-pool logic (instead of using an array, use a single linked list)..
transactions can also act as node (no need to introduce additional datastructures).

--------------------------------------------------------------------
                        to do
--------------------------------------------------------------------

- adding read committed isolation level



- testing: prepare of transactions and excusive lock isolation level

- testing: listeners & exceptions

- pre/post start listeners and fat gamma block

- testing: commute and locking

- testing: atomic change operations and globalconflictcounter increment

- testing: local conflict counter should be set if needed when the flatten commute is called.

- testing improved for the repeatable read isolation level

- testing: lean transaction and readonly? no checking is done but what if configured as readonly

- testing:GammaRef_atomicGetAndSetTest

- testing:GammaRef_atomicAlterAndGetTest

- testing:GammaRef_atomicGetAndAlterTest

- testing:GammaRef_commuteTest

- testing:GammaRef_getAndAlterTest

- testing:Lock.acquire0Test

- testing:Lock_getLockMode0Test

- testing:PhantomReadTest

--------------------------------------------------------------------
                        done
--------------------------------------------------------------------
