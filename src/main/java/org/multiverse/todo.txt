ideas:

- non repeatable read?

- on read/ on write function
    - stuff like encryption and security could be added through this general purpose mechanism

- reset the speculative stuff once and a while.

- some spinning is allowed for the read conflict scan:
    is this desirable? If it is locked, chances are high that and update already is done or is going
    to be done.

- it possible to work with a stripe of conflict counters?

- is it possible to do something with biased locking? So could an object be biased towards a
transaction? This saves times if the object is read/updated by one thread repeatedly... privatization

- is it possible to replace the snzi on the fly? So start with a cheap one (the uncontended snzi)
and upgrade to a more complex one if needed.

- a mechanism to count the number of cas statements needed.

- write validation: can it be optimized? If the conflict counter has not changed, you know that no other
transaction has caused any conflicting writes. So you know that there is no write conflict.

- make distinction between arriveForRead/arriveForWrite and upgradeArriveForReadToArriveForWrite

- it is important that once a transaction has read a read biased orec, that it doesn't do a depart.
Because the orec could have been changed to write biased. This will be not possible because:
a tranlocal can't be

- generate different classes: for conflict counter directly and for conflict counter with an array.

- when a transaction needs to wait for a lock, can it help another transaction?

- contention management.

- safe way to use multiple stm's (refs need to store the stm they belong to and transaction
 needs to detect if there is a conflict. Problem is with non fresh refs

- expose lock for read.

- expose lock for write.

- expose if lock is free

- expose if lock is owned by current transaction

- expose if lock is owned by other transaction

- read transaction still can be expensive because some read tracking is needed when it hits
non permanent.

- the class index makes it easy to create some kind of arrays that store all kind of information
  on the transactional class level. The question is how to to do it for transactions. You don't want to
  publish it every time.

- and what about 'snapshots'? so only doing it 1 of the n calls.

- bug shaker

- ref: the registerRetrylatch should also do the abort.

- is it possible to combine pessimistic locking with blockingEnabled? What if a transaction wants to wait for a lock
to become free... so can when a lock unlease is done, see if there are listeners before releasing the lock? If
done before, the transaction knows it can remove the current listeners with the a cas, and add them to the set
of listeners that to be notified. If a transaction wants to block ...
when a normal transaction... when a lock is acquired, a retry error should also be thrown.

- support for listener: can be done by providing the previous tranlocal. If that is not the same as the
current tranlocal.. can you retry immediately? Watch out with updates because you need to use the
origin. The problem with the old approach, is that an additional volatile read is needed and this kills
performance.

- use the function's for the atomic change functions

- improved backoff policy

- durability:
    only when committing, a dirty transactional object needs to be checked if it is durable. If it isn't
    no unitofwrite needs to be used. If it is, a unit of write needs to be used. So the commit needs to 

- write bit in the orec? Can be used to indicate to another transaction wants to write.. when committing and
 exclusive writebit set by another transaction, no write can happen. The advantage of purely locking is that
 reads still can happen even though it is 'locked' exclusively for writing by one transaction. 

todo

- the atomic get isn't valid, it could potentially return dirty writes since the tranlocal could be pooled.

- mono transaction: support for orelse

- array transaction:  support for orelse

- array tree transaction: support for orelse

- mono transaction and unstarted state

- array transaction and unstarted state

- map transaction and unstarted state

- atomic inc on refs for values

- unshared atomicget, with periodic atomicset.

- mono transaction can do a cheap read of the current tranlocal already is permanent.

- transaction completely optimized for ref.

- integratie into the main multiverse branch

- integratie multiverse api

- tracing

- support for writeskew detection
    - how should the writeskew detection be done? Should it lock all reads?
    - could be part of the fat tx.

- when hard reset is done, no new local conflict counter is created, so still attached to the old
globalconflict counter.

- fat mono transaction: failing lifecyclelistener while committing

- fat array transaction: failing lifecyclelistener while committing

- fat arraytree transaction: failing lifecyclelistener while committing

- stm callback for external logic. goal should be that lean transactions still are usable

- blocking and speculative readtracking?

- transaction.prepareForPooling & add it to objectpool.
   - make sure that the object that are pooled, are not a potential source of memory leaks. E.g. transactions
   still holding references to old data.

- methods of the atomic object need to be prefixed so they won't cause problems with user methods     

- clojure: add watch. Basic functionality already is there, but atm it is done to all
     reads and not specific ones.

- mono transaction: error messages should include classname

- array transaction: error messages should include classname

- array tree transaction: error messages should include classname

- testing: mono transaction and conflict counter setting

- testing: array transaction and conflict counter setting`

- testing: mono transaction and partial read tracking

    - all kinds of variations with non automatic read tracking

- testing: array transaction and partial read tracking

- testing: array tree transaction and partial read tracking

- commute

    - add commuting to mono beta transaction

    - when a commuting function fails, the transaction should be aborted.

    - the nodes for the commute functions need to be pooled.

    - commute: commuting functions are executed in reverse order.

    - testing: commute: check if conflict counters are set correctly when an addCommute is done

    - when commute function is evaluated, there should be protection against openForXXX on transaction.

    - registerAndAbort: doesn't deal with commuting values correctly. it sees it as a correct read

- rollbackfor/rollnotbackfor exception configuration

- betatransactiontemplate needs to be removed

- testing: atomic block & propagation and committed/aborted/prepared/new transaction on threadlocal

- lean mono should not upgrade to array when untracked read is done, but should just attach it to the session.

- speculative + register doesn't combine because it can lead to transaction not accepting the task and therefor
the task not being executed at all.

- expose the ref

- actor atomic block, doesn't look at an existing transaction. Automatically exposes the onAbort/onCommit

- when all reads/writes are pessimistic, cheap conflict detection and cheap prepare.

- is there a need for ref.specialization?

- integration test for the object granularity functionality (since the abstractbetatransactionalobject is added)

- openForConstruction on generic transactional object should return current type of tranlocal

- openForRead on generic transactional object should return current type of tranlocal

- openForWrite on generic transactional object should return current type of tranlocal

- pooling for generic transactional object tranlocals.

done

- added empty add watch signature to transaction.

- increment test with commuting increments.

- old contructors need to be removed from ref

- org.multiverse.stms.beta.transactionalobjects -> org.multiverse.stms.beta.transactionalobjects

- refs package now contains all tranlocals,refs, betatransactionalobjects.

- ref in groovy script needs to be renamed to betatransactionalobject

- DurableObject needs to have ___ methods.

- generate an abstract betatransactionalobject that can be used as mixin and for creating hand written
 transactional datastructures.

- active needs to have ___ as prefix in ref

- listeners needs to have ___ as prefix in ref

- AbstractBetaTransactionalObject needs to have a locked instance.

- identityHashCode needs to have ___ prefix

- orec now has ___ as prefix for methods to prevent clashes.

- all methods of the betatransactionalobject have prefix

- need to think more about the ref & retry especially reading/writing safety

- atomic block: add checked stuff

old done

