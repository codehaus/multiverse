package org.multiverse.stms.beta.transactions;

import org.multiverse.api.TransactionStatus;
import org.multiverse.api.blocking.*;
import org.multiverse.api.exceptions.*;
import org.multiverse.api.lifecycle.*;
import org.multiverse.functions.*;
import org.multiverse.stms.beta.*;
import org.multiverse.stms.beta.refs.*;
import org.multiverse.stms.beta.conflictcounters.*;

import static org.multiverse.stms.beta.ThreadLocalBetaObjectPool.*;

import static java.lang.String.format;

/**
 * A BetaTransaction tailored for dealing with 1 transactional object.
 *
 * This class is generated.
 *
 * @author Peter Veentjer
 */
public final class ${transaction.name} extends ${transaction.superClass} {

    private Tranlocal attached;
#if(!${transaction.lean})
    private boolean hasReads;
    private boolean hasUntrackedReads;
    private final LocalConflictCounter localConflictCounter;
#end

    public ${transaction.name}(final BetaStm stm){
        this(new BetaTransactionConfig(stm));
    }

    public ${transaction.name}(final BetaTransactionConfig config) {
        super(${transaction.poolName}, config);
        this.remainingTimeoutNs = config.timeoutNs;
#if(!${transaction.lean})
        this.localConflictCounter = config.globalConflictCounter.createLocalConflictCounter();
#end
    }

#if(!${transaction.lean})
    public final LocalConflictCounter getLocalConflictCounter(){
        return localConflictCounter;
    }
#end

    @Override
    public void start(){
        start(getThreadLocalBetaObjectPool());
    }

    @Override
    public void start(final BetaObjectPool pool){
        if(status != NEW){
            switch(status){
                case ACTIVE:
                    //it can't do harm to start an already started transaction
                    return;
                case PREPARED:
                    abort();
                    throw new PreparedTransactionException(
                        format("Can't start already prepared transaction '%s'",config.familyName));
                case ABORTED:
                    throw new DeadTransactionException(
                        format("Can't start already aborted transaction '%s'",config.familyName));
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("Can't start already committed transaction '%s'",config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }
        status = ACTIVE;
    }

#foreach($ref in $refs)

    @Override
    public final ${ref.typeParameter} ${ref.tranlocal} openForRead(final ${ref.name}${ref.typeParameter} ref,  boolean lock, final BetaObjectPool pool) {
//        assert pool!=null;

        if (status != ACTIVE) {
            throw abortOpenForRead(pool);
        }

        if (ref == null) {
            return null;
        }

        lock = lock || config.lockReads;

        if(attached == null){
            //the transaction has no previous attached references.

#if(!$transaction.lean)
            if(!hasReads){
                localConflictCounter.reset();
                hasReads = true;
            }
#end
            if(lock){
                ${ref.tranlocal}${ref.typeParameter} read = ref.lockAndLoad(config.spinCount, this);

                //if it was locked, lets abort.
                if (read.isLocked) {
                    throw abortOnReadConflict(pool);
                }

#if(!$transaction.lean)
                if(hasReadConflict()){
                    read.owner.abort(this, read, pool);
                    throw abortOnReadConflict(pool);
                }

#end
                attached = read;
                return read;
            }else{
                ${ref.tranlocal}${ref.typeParameter} read = ref.load(config.spinCount);

                //if it was locked, lets abort.
                if (read.isLocked) {
                    throw abortOnReadConflict(pool);
                }

#if(!$transaction.lean)
                if(hasReadConflict()){
                    read.owner.abort(this, read, pool);
                    throw abortOnReadConflict(pool);
                }

#end
                if(!read.isPermanent){
                    attached = read;
                }else if(config.trackReads){
                    attached = read;
                }else{
#if(!$transaction.lean)
                    hasUntrackedReads = true;
#else
                    throw abortOnTooSmallSize(pool, 2);
#end
                }

                return read;
            }
        }

        //the transaction has a previous attached reference

        if(attached.owner == ref){
            //the reference is the one we are looking for.
            ${ref.tranlocal}${ref.typeParameter} read = (${ref.tranlocal}${ref.typeParameter})attached;

            if(lock){
                if(!ref.tryLockAndCheckConflict(this, config.spinCount, read)){
                    throw abortOnReadConflict(pool);
                }
            }

            return read;
        }

        if(lock || config.trackReads){
            throw abortOnTooSmallSize(pool, 2);
        }

        //it is not the reference we are looking for, lets try to load it. They only good outcome
        //if this path is reading an untracked read.

#if(!${transaction.lean})

        if(!hasReads){
            localConflictCounter.reset();
            hasReads = true;
        }
#end

        ${ref.tranlocal}${ref.typeParameter} read = ref.load(config.spinCount);

        //if it was locked, lets abort.
        if (read.isLocked) {
            throw abortOnReadConflict(pool);
        }

#if($transaction.lean)
        throw abortOnTooSmallSize(pool, 2);
#else
        if(read.isPermanent){
            throw abortOnTooSmallSize(pool, 2);
        }

        if(hasReadConflict()){
            read.owner.abort(this, read, pool);
            throw abortOnReadConflict(pool);
        }

        hasUntrackedReads = true;
        return read;
#end
    }

    @Override
    public final ${ref.typeParameter} ${ref.tranlocal}${ref.typeParameter} openForWrite(
        final ${ref.name}${ref.typeParameter} ref, boolean lock, final BetaObjectPool pool) {

        if (status != ACTIVE) {
            throw abortOpenForWrite(pool);
        }

        if (ref == null) {
            abort(pool);
            throw new NullPointerException(
                format("Can't open for writing a null ref/transactionalobject using transaction '%s'",config.familyName));
        }

        if (config.readonly) {
            abort(pool);
            throw new ReadonlyException(
                format("Can't write to readonly transaction '%s'", config.familyName));
        }

        lock = lock || config.lockWrites;

        if(attached == null){
            //the transaction has no previous attached references.

#if(!${transaction.lean})
            if(!hasReads){
                localConflictCounter.reset();
                hasReads = true;
            }
#end
            ${ref.tranlocal}${ref.typeParameter} read = lock ? ref.lockAndLoad(config.spinCount, this) : ref.load(config.spinCount);

            //if it was locked, lets abort.
            if (read.isLocked) {
                throw abortOnReadConflict(pool);
            }

#if(!${transaction.lean})
            if(hasReadConflict()){
                read.owner.abort(this, read, pool);
                throw abortOnReadConflict(pool);
            }
    
#end
#if($ref.isSpecialization())
            ${ref.tranlocal}${ref.typeParameter} result = pool.take(ref);
            if (result == null) {
                result = new ${ref.tranlocal}${ref.typeParameter}(ref);
            }
            result.value = read.value;
            result.read = read;
#else
            ${ref.tranlocal}${ref.typeParameter} result = read.openForWrite(pool);
#end

            attached = result;
            return result;
        }

        //the transaction has a previous attached reference

        if(attached.owner != ref){
            throw abortOnTooSmallSize(pool, 2);
        }

        //the reference is the one we are looking for.
        ${ref.tranlocal}${ref.typeParameter} current = (${ref.tranlocal}${ref.typeParameter})attached;

        if(lock){
            if(!ref.tryLockAndCheckConflict(this, config.spinCount, current)){
                throw abortOnReadConflict(pool);
            }
        }

        if(!current.isCommitted){
            return current;
        }

#if($ref.isSpecialization())
        ${ref.tranlocal}${ref.typeParameter} result = pool.take(ref);
        if (result == null) {
            result = new ${ref.tranlocal}${ref.typeParameter}(ref);
        }
        result.value = current.value;
        result.read = current;
#else
        ${ref.tranlocal}${ref.typeParameter} result = current.openForWrite(pool);
#end
        attached = result;
        return result;
    }

    @Override
    public final ${ref.typeParameter} ${ref.tranlocal}${ref.typeParameter} openForConstruction(
        final ${ref.name}${ref.typeParameter} ref, final BetaObjectPool pool) {

        if (status != ACTIVE) {
           throw abortOpenForConstruction(pool);
        }

        if (ref == null) {
            abort(pool);
            throw new NullPointerException(
                format("Can't open for construction a null transactionalobject/ref using transaction '%s'",config.familyName));
        }

        if (config.readonly) {
            abort(pool);
            throw new ReadonlyException(
                format("Can't open for construction a new object using readonly transaction '%s'",config.familyName));
        }

        ${ref.tranlocal}${ref.typeParameter} result = (attached == null || attached.owner != ref) ? null : (${ref.tranlocal}${ref.typeParameter})attached;

        if(result != null){
            if(result.isCommitted || result.read != null){
                abort();
                throw new IllegalArgumentException(
                    format("Can't open a previous committed object of class '%s' for construction on transaction '%s'",
                        config.familyName, ref.getClass().getName()));
            }

            return result;
        }

        //check if there is room
        if (attached != null) {
            throw abortOnTooSmallSize(pool, 2);
        }

        if(ref.unsafeLoad()!=null){
            abort();
            throw new IllegalArgumentException();
        }

#if($ref.isSpecialization())
        result =  pool.take(ref);
        if(result == null){
            result = new ${ref.tranlocal}${ref.typeParameter}(ref);
        }
#else
        result = ref.openForConstruction(pool);
#end
        attached = result;
        return result;
    }

    public ${ref.typeParameter} void commute(${ref.name}${ref.typeParameter} ref, BetaObjectPool pool, ${ref.functionClass}${ref.typeParameter} function){
        throw new TodoException();
    }


#end ##for loop for refs

    public Tranlocal get(BetaTransactionalObject object){
        return attached == null || attached.owner!= object? null: attached;
    }

#if(!$transaction.lean)
    // ======================= read conflict =======================================

    private boolean hasReadConflict() {
        if(config.lockReads){
            return false;
        }

        if(hasUntrackedReads){
            return localConflictCounter.syncAndCheckConflict();
        }

        if(attached == null){
            return false;
        }

        if (!localConflictCounter.syncAndCheckConflict()) {
            return false;
        }

        return attached.owner.hasReadConflict(attached, this);
    }

#end
    // ======================= abort =======================================

    @Override
    public void abort() {
        abort(getThreadLocalBetaObjectPool());
    }

    @Override
    public final void abort(final BetaObjectPool pool) {
        if (status != ACTIVE && status != PREPARED) {
            switch (status) {
                case ABORTED:
                    return;
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("Can't abort already aborted transaction '%s'",config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        if (attached != null) {
            attached.owner.abort(this, attached, pool);
        }

        status = ABORTED;

#if(!$transaction.lean)
        if(permanentListeners != null){
            notifyListeners(permanentListeners, TransactionLifecycleEvent.PostAbort);
        }

        if(normalListeners != null){
            notifyListeners(normalListeners, TransactionLifecycleEvent.PostAbort);
        }
#end
    }

    // ================== commit ===========================================

    @Override
    public void commit() {
        commit(getThreadLocalBetaObjectPool());
    }

#if(${transaction.lean})
    @Override
    public final void commit(final BetaObjectPool pool) {
        if (status != ACTIVE && status != PREPARED) {
            switch (status) {
                case ABORTED:
                    throw new DeadTransactionException(
                        format("Can't commit already aborted transaction '%s'", config.familyName));
                case COMMITTED:
                    return;
                default:
                    throw new IllegalStateException();
            }
        }

        if(abortOnly){
            throw abortOnWriteConflict(pool);
        }
            
        Listeners listeners = null;
        if(attached!=null){
            if(config.dirtyCheck){
                if(status == ACTIVE){
                    if(!doPrepareDirty()){
                        throw abortOnWriteConflict(pool);
                    }
                }

                listeners = attached.owner.commitDirty(attached, this, pool, config.globalConflictCounter);
            }else{
                if(status == ACTIVE){
                    if(!doPrepareAll()){
                        throw abortOnWriteConflict(pool);
                    }
                }

                listeners = attached.owner.commitAll(attached, this, pool, config.globalConflictCounter);
            }
        }

        status = COMMITTED;

        if(listeners != null){
            listeners.openAll(pool);
        }
    }
#else
    @Override
    public final void commit(final BetaObjectPool pool) {
        if(status == COMMITTED){
            return;
        }

        prepare();
        Listeners listeners = null;
        if (attached!=null) {
            if(config.dirtyCheck){
                listeners = attached.owner.commitDirty(attached, this, pool, config.globalConflictCounter);
            }else{
                listeners = attached.owner.commitAll(attached, this, pool, config.globalConflictCounter);
            }
        }
        status = COMMITTED;

        if(listeners != null){
            listeners.openAll(pool);
        }

        if(permanentListeners != null){
            notifyListeners(permanentListeners, TransactionLifecycleEvent.PostCommit);
        }

        if(normalListeners != null){
            notifyListeners(normalListeners, TransactionLifecycleEvent.PostCommit);
        }
    }
#end

    // ======================= prepare ============================

    @Override
    public void prepare() {
        prepare(getThreadLocalBetaObjectPool());
    }

#if($transaction.lean)
    @Override
    public final void prepare(final BetaObjectPool pool) {
        if(status != ACTIVE){
            switch (status) {
                case PREPARED:
                    return;
                case ABORTED:
                    throw new DeadTransactionException(
                        format("Can't prepare already aborted transaction '%s'", config.familyName));
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("Can't prepare already committed transaction '%s'", config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        if(abortOnly){
            throw abortOnWriteConflict(pool);
        }

        if(attached!=null){
            if(config.dirtyCheck){
                if(!doPrepareDirty()){
                    throw abortOnWriteConflict(pool);
                }
            }else{
                if(!doPrepareAll()){
                    throw abortOnWriteConflict(pool);
                }
            }
        }

        status = PREPARED;
    }
#else
    @Override
    public final void prepare(final BetaObjectPool pool) {
        if(status != ACTIVE){
            switch (status) {
                case PREPARED:
                    return;
                case ABORTED:
                    throw new DeadTransactionException(
                        format("Can't prepare already aborted transaction '%s'", config.familyName));
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("Can't prepare already committed transaction '%s'", config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        boolean abort = true;
        try{
            if(permanentListeners != null){
                notifyListeners(permanentListeners, TransactionLifecycleEvent.PrePrepare);
            }

            if(normalListeners != null){
                notifyListeners(normalListeners, TransactionLifecycleEvent.PrePrepare);
            }

            if(abortOnly){
                throw abortOnWriteConflict(pool);
            }
          
            if(attached!=null){
                if(config.dirtyCheck){
                    if(!doPrepareDirty()){
                        throw abortOnWriteConflict(pool);
                    }
                }else{
                    if(!doPrepareAll()){
                        throw abortOnWriteConflict(pool);
                    }
                }
            }

            status = PREPARED;
            abort = false;
        }finally{
            if(abort){
                abort(pool);
            }
        }
    }
#end

    private boolean doPrepareDirty(){
        if (!attached.isCommitted && attached.calculateIsDirty()){
            if(!attached.owner.tryLockAndCheckConflict(this, config.spinCount, attached)){
                return false;
            }
        }

        return true;
    }

    private boolean doPrepareAll(){
        if (!attached.isCommitted){
            if(!attached.owner.tryLockAndCheckConflict(this, config.spinCount, attached)){
                return false;
            }
        }

        return true;
    }

    // ============================ registerChangeListenerAndAbort ===================

    @Override
    public void registerChangeListenerAndAbort(final Latch listener){
        registerChangeListenerAndAbort(listener, getThreadLocalBetaObjectPool());
    }

    @Override
    public final void registerChangeListenerAndAbort(final Latch listener, final BetaObjectPool pool) {
        if (status != ACTIVE) {
            switch (status) {
                case PREPARED:
                    abort();
                    throw new PreparedTransactionException(
                        format("Can't block on already prepared transaction '%s'", config.familyName));
                case ABORTED:
                    throw new DeadTransactionException(
                        format("Can't block on already aborted transaction '%s'", config.familyName));
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("Can't block on already committed transaction '%s'", config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        if(listener == null){
            abort();
            throw new NullPointerException(
                format("Can't block with a null listener on transaction '%s'", config.familyName));
        }

        if(!config.blockingAllowed){
            abort();
            throw new NoRetryPossibleException(
                format("Can't block transaction '%s', since it explicitly is configured as non blockable",config.familyName));
        }

        if( attached == null){
            abort();
            throw new NoRetryPossibleException(
                format("Can't block transaction '%s', since there are no tracked reads",config.familyName));
        }

        final long listenerEra = listener.getEra();
        final BetaTransactionalObject owner = attached.owner;


        boolean failure = owner.registerChangeListener(listener, attached, pool, listenerEra) == BetaTransactionalObject.REGISTRATION_NONE;
        owner.abort(this, attached, pool);
        status = ABORTED;

#if(!$transaction.lean)
        if(permanentListeners != null){
            notifyListeners(permanentListeners, TransactionLifecycleEvent.PostAbort);
        }

        if(normalListeners != null){
            notifyListeners(normalListeners, TransactionLifecycleEvent.PostAbort);
        }
#end

        if(failure){
            throw new NoRetryPossibleException(
            format("Can't block transaction '%s', since there are no tracked reads",config.familyName));
        }
    }

    // =========================== init ================================

    @Override
    public void init(BetaTransactionConfig transactionConfig){
        init(transactionConfig, getThreadLocalBetaObjectPool());
    }

    @Override
    public void init(BetaTransactionConfig transactionConfig, BetaObjectPool pool){
        if(transactionConfig == null){
            abort();
            throw new NullPointerException();
        }

        if(status == ACTIVE || status == PREPARED){
            abort(pool);
        }

        this.config = transactionConfig;
        hardReset(pool);
    }

    // ========================= reset ===============================

    @Override
    public boolean softReset(){
        return softReset(getThreadLocalBetaObjectPool());
    }

    @Override
    public boolean softReset(final BetaObjectPool pool) {
        if (status == ACTIVE || status == PREPARED) {
#if($transaction.lean)
            if(attached!=null){
                attached.owner.abort(this, attached, pool);
            }
#else
            abort(pool);
#end
        }

        if(attempt >= config.getMaxRetries()){
            return false;
        }

        status = ACTIVE;
        attempt++;
        abortOnly = false;
        attached = null;
#if(!$transaction.lean)
        hasReads = false;
        hasUntrackedReads = false;
        if(normalListeners!=null){
            normalListeners.clear();
        }     
#end
        return true;
    }

    @Override
    public void hardReset(){
        hardReset(getThreadLocalBetaObjectPool());
    }

    @Override
    public void hardReset(final BetaObjectPool pool){
        if (status == ACTIVE || status == PREPARED) {
#if($transaction.lean)
            if(attached!=null){
                attached.owner.abort(this, attached, pool);
            }
#else
            abort(pool);
#end
        }

        status = ACTIVE;
        abortOnly = false;        
        remainingTimeoutNs = config.timeoutNs;
        attached = null;
        attempt = 1;
#if(!$transaction.lean)
        hasReads = false;
        hasUntrackedReads = false;
        if(normalListeners !=null){
            pool.putArrayList(normalListeners);
            normalListeners = null;
        }

        if(permanentListeners!=null){
            pool.putArrayList(permanentListeners);
            permanentListeners = null;
        }
#end
    }

    // ================== orelse ============================

    @Override
    public final void startEitherBranch(){
        startEitherBranch(getThreadLocalBetaObjectPool());
    }

    @Override
    public final void startEitherBranch(BetaObjectPool pool){
        throw new TodoException();
    }

    @Override
    public final void endEitherBranch(){
        endEitherBranch(getThreadLocalBetaObjectPool());
    }

    @Override
    public final void endEitherBranch(BetaObjectPool pool){
        throw new TodoException();
    }

    @Override
    public final void startOrElseBranch(){
        startOrElseBranch(getThreadLocalBetaObjectPool());
    }

    @Override
    public final void startOrElseBranch(BetaObjectPool pool){
        throw new TodoException();
    }
}

