package org.multiverse.stms.beta.transactions;

import org.multiverse.api.*;
import org.multiverse.api.blocking.*;
import org.multiverse.api.exceptions.*;
import org.multiverse.api.functions.*;
import org.multiverse.api.lifecycle.*;
import org.multiverse.stms.beta.*;
import org.multiverse.stms.beta.transactionalobjects.*;
import org.multiverse.stms.beta.conflictcounters.*;

import static java.lang.String.format;

/**
 * A BetaTransaction tailored for dealing with 1 transactional object.
 *
 * This class is generated.
 *
 * @author Peter Veentjer
 */
public final class ${transaction.name} extends ${transaction.superClass} {

    private Tranlocal attached;
    private boolean hasUpdates;
#if(!${transaction.lean})
    private boolean hasReads;
    private boolean hasUntrackedReads;
    private LocalConflictCounter localConflictCounter;
    private boolean evaluatingCommute;
#end

    public ${transaction.name}(final BetaStm stm){
        this(new BetaTransactionConfiguration(stm).init());
    }

    public ${transaction.name}(final BetaTransactionConfiguration config) {
        super(${transaction.poolName}, config);
        this.remainingTimeoutNs = config.timeoutNs;
#if(!${transaction.lean})
        this.localConflictCounter = config.globalConflictCounter.createLocalConflictCounter();
#end
    }

#if(!${transaction.lean})
    public final LocalConflictCounter getLocalConflictCounter(){
        return localConflictCounter;
    }
#end

    public final boolean tryLock(BetaTransactionalObject ref, int lockMode){
        throw new TodoException();
    }
    
#foreach($ref in $transactionalObjects)

#if(!${transaction.lean})
    private ${ref.typeParameter} void flattenCommute(
        final ${ref.name}${ref.typeParameter} ref,
        final ${ref.tranlocal}${ref.typeParameter} tranlocal,
        final int lockMode){

        if(!hasReads){
            localConflictCounter.reset();
            hasReads = true;
        }

        final ${ref.tranlocal}${ref.typeParameter} read = ref.___load(config.spinCount, this, lockMode);

        if (read.isLocked) {
            throw abortOnReadConflict();
        }

        if (hasReadConflict()) {
            ref.___abort(this, read, pool);
            throw abortOnReadConflict();
        }

        tranlocal.read = read;
        boolean abort = true;
        evaluatingCommute = true;
        try{
            tranlocal.evaluateCommutingFunctions(pool);
            abort = false;
        }finally{
            evaluatingCommute = false;
            if(abort){
                abort();
            }
        }
    }

#end
    @Override
    public final ${ref.typeParameter} ${ref.tranlocal}${ref.typeParameter} openForRead(
        final ${ref.name}${ref.typeParameter} ref,
        int lockMode) {

        if (status != ACTIVE) {
            throw abortOpenForRead(ref);
        }

#if(!${transaction.lean})
        if(evaluatingCommute){
            throw abortOnOpenForReadWhileEvaluatingCommute(ref);
        }

#end
        if (ref == null) {
            return null;
        }

        lockMode = lockMode>=config.readLockMode?lockMode:config.readLockMode;

        if(attached == null){
            //the transaction has no previous attached references.

#if(!$transaction.lean)
            if(!hasReads){
                localConflictCounter.reset();
                hasReads = true;
            }
#end
            ${ref.tranlocal}${ref.typeParameter} read = ref.___load(config.spinCount, this, lockMode);

            if (read.isLocked) {
                throw abortOnReadConflict();
            }

#if(!$transaction.lean)
            if(hasReadConflict()){
                read.owner.___abort(this, read, pool);
                throw abortOnReadConflict();
            }

#end
            if(lockMode!=LOCKMODE_NONE || !read.isPermanent || config.trackReads){
                attached = read;
            }else{
#if(!$transaction.lean)
                hasUntrackedReads = true;
#else
                throw abortOnTooSmallSize(2);
#end
            }

            return read;
        }

        //the transaction has a previous attached reference
        if(attached.owner == ref){
            //the reference is the one we are looking for.
            ${ref.tranlocal}${ref.typeParameter} result = (${ref.tranlocal}${ref.typeParameter})attached;

#if(!$transaction.lean)
            if(result.isCommuting){
                flattenCommute(ref, result, lockMode);
                return result;
            }else
#end
            if(lockMode!=LOCKMODE_NONE &&
                !ref.___tryLockAndCheckConflict(this, config.spinCount, result, lockMode == LOCKMODE_COMMIT)){
                throw abortOnReadConflict();
            }

            return result;
        }

        if(lockMode!=LOCKMODE_NONE || config.trackReads){
            throw abortOnTooSmallSize(2);
        }

#if(!${transaction.lean})
        if(!hasReads){
            localConflictCounter.reset();
            hasReads = true;
        }

#end
        ${ref.tranlocal}${ref.typeParameter} read = ref.___load(config.spinCount, this, lockMode);

        //if it was locked, lets abort.
        if (read.isLocked) {
            throw abortOnReadConflict();
        }

#if($transaction.lean)
        throw abortOnTooSmallSize(2);
#else
        if(read.isPermanent){
            throw abortOnTooSmallSize(2);
        }

        if(hasReadConflict()){
            read.owner.___abort(this, read, pool);
            throw abortOnReadConflict();
        }

        hasUntrackedReads = true;
        return read;
#end
    }

    @Override
    public final ${ref.typeParameter} ${ref.tranlocal}${ref.typeParameter} openForWrite(
        final ${ref.name}${ref.typeParameter} ref, int lockMode) {

        if (status != ACTIVE) {
            throw abortOpenForWrite(ref);
        }

#if(!${transaction.lean})
        if(evaluatingCommute){
            throw abortOnOpenForWriteWhileEvaluatingCommute(ref);
        }

#end
        if (ref == null) {
            throw abortOpenForWriteWhenNullReference();
        }

        if (config.readonly) {
            throw abortOpenForWriteWhenReadonly(ref);
        }

        lockMode = lockMode>=config.writeLockMode?lockMode:config.writeLockMode;

        if(attached == null){
            //the transaction has no previous attached references.

#if(!${transaction.lean})
            if(!hasReads){
                localConflictCounter.reset();
                hasReads = true;
            }
#end
            ${ref.tranlocal}${ref.typeParameter} read = ref.___load(config.spinCount, this, lockMode);

            //if it was locked, lets abort.
            if (read.isLocked) {
                throw abortOnReadConflict();
            }

#if(!${transaction.lean})
            if(hasReadConflict()){
                read.owner.___abort(this, read, pool);
                throw abortOnReadConflict();
            }
    
#end
#if(${ref.isReference})
            ${ref.tranlocal}${ref.typeParameter} result = pool.take(ref);
            if (result == null) {
                result = new ${ref.tranlocal}${ref.typeParameter}(ref);
            }
            result.value = read.value;
            result.read = read;
#else
            ${ref.tranlocal}${ref.typeParameter} result = read.openForWrite(pool);
#end

            hasUpdates = true;
            attached = result;
            return result;
        }

        //the transaction has a previous attached reference

        if(attached.owner != ref){
            throw abortOnTooSmallSize(2);
        }

        //the reference is the one we are looking for.
        ${ref.tranlocal}${ref.typeParameter} result = (${ref.tranlocal}${ref.typeParameter})attached;

#if(!$transaction.lean)
        if(result.isCommuting){
            flattenCommute(ref, result, lockMode);
            return result;
        }else
#end
        if(lockMode!=LOCKMODE_NONE
            && !ref.___tryLockAndCheckConflict(this, config.spinCount, result, lockMode == LOCKMODE_COMMIT)){
            throw abortOnReadConflict();
        }

        if(!result.isCommitted){
            return result;
        }

        final ${ref.tranlocal}${ref.typeParameter} read = result;
#if(${ref.isReference})
        result = pool.take(ref);
        if (result == null) {
            result = new ${ref.tranlocal}${ref.typeParameter}(ref);
        }
        result.value = read.value;
        result.read = read;
#else
        result = read.openForWrite(pool);
#end
        hasUpdates = true;    
        attached = result;
        return result;
    }

    @Override
    public final ${ref.typeParameter} ${ref.tranlocal}${ref.typeParameter} openForConstruction(
        final ${ref.name}${ref.typeParameter} ref) {

        if (status != ACTIVE) {
           throw abortOpenForConstruction(ref);
        }

#if(!${transaction.lean})
        if(evaluatingCommute){
            throw abortOnOpenForConstructionWhileEvaluatingCommute(ref);
        }

#end
        if (ref == null) {
            throw abortOpenForConstructionWhenNullReference();
        }

        if (config.readonly) {
            throw abortOpenForConstructionWhenReadonly(ref);
        }

        ${ref.tranlocal}${ref.typeParameter} result = (attached == null || attached.owner != ref) ? null : (${ref.tranlocal}${ref.typeParameter})attached;

        if(result != null){
            if(result.isCommitted || result.read != null){
               throw abortOpenForConstructionWithBadReference(ref);
            }

            return result;
        }

        //check if there is room
        if (attached != null) {
            throw abortOnTooSmallSize(2);
        }

        if(ref.___unsafeLoad()!=null){
            throw abortOpenForConstructionWithBadReference(ref);
        }

#if(${ref.isReference})
        result =  pool.take(ref);
        if(result == null){
            result = new ${ref.tranlocal}${ref.typeParameter}(ref);
        }
#else
        result = ref.___openForConstruction(pool);
#end
        result.isDirty = DIRTY_TRUE;
        attached = result;
        return result;
    }

    public ${ref.typeParameter} void commute(
        ${ref.name}${ref.typeParameter} ref, ${ref.functionClass}${ref.typeParameter} function){

        if (status != ACTIVE) {
            throw abortCommute(ref, function);
        }

        if(function == null){
            throw abortCommuteOnNullFunction(ref);
        }
    
#if($transaction.lean)
        config.needsCommute();
        abort();
        throw SpeculativeConfigurationError.INSTANCE;
#else
        if(evaluatingCommute){
            throw abortOnCommuteWhileEvaluatingCommute(ref);
        }

        if (config.readonly) {
            throw abortCommuteWhenReadonly(ref, function);
        }

        if (ref == null) {
            throw abortCommuteWhenNullReference(function);
        }

        final boolean contains = (attached != null && attached.owner == ref);
        if(!contains){
            if(attached != null) {
                throw abortOnTooSmallSize(2);
            }

            //todo: call to 'openForCommute' can be inlined.
            ${ref.tranlocal}${ref.typeParameter} result = ref.___openForCommute(pool);
            attached=result;
            hasUpdates = true;
            result.addCommutingFunction(function, pool);
            return;
        }

        ${ref.tranlocal}${ref.typeParameter} result = (${ref.tranlocal}${ref.typeParameter})attached;
        if(result.isCommuting){
            result.addCommutingFunction(function, pool);
            return;
        }

        if(result.isCommitted){
            final ${ref.tranlocal}${ref.typeParameter} read = result;
#if(${ref.isReference})
            result =  pool.take(ref);
            if(result == null){
                result = new ${ref.tranlocal}${ref.typeParameter}(ref);
            }
            result.read = read;
            result.value = read.value;
#else
            result = read.openForWrite(pool);
#end
            hasUpdates = true;
            attached=result;
        }

#if(${ref.isReference})
        result.value = function.call(result.value);
#else
        throw new TodoException();
#end
#end ##if(transaction.lean)    
    }

#end ##for loop for transactionalobjects

    @Override
    public Tranlocal get(BetaTransactionalObject object){
        return attached == null || attached.owner!= object? null: attached;
    }

#if(!$transaction.lean)
    // ======================= read conflict =======================================

    private boolean hasReadConflict() {
        if(config.readLockMode!=LOCKMODE_NONE){
            return false;
        }

        if(hasUntrackedReads){
            return localConflictCounter.syncAndCheckConflict();
        }

        if(attached == null){
            return false;
        }

        if (!localConflictCounter.syncAndCheckConflict()) {
            return false;
        }

        return attached.owner.___hasReadConflict(attached, this);
    }

#end
    // ============================= addWatch ===================================

    public void addWatch(BetaTransactionalObject object, Watch watch){
        throw new TodoException();
    }


    // ======================= abort =======================================

    @Override
    public final void abort() {
        if (status != ACTIVE && status != PREPARED) {
            switch (status) {
                case ABORTED:
                    return;
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("[%s] Can't abort an already aborted transaction",config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        if (attached != null) {
            attached.owner.___abort(this, attached, pool);
            attached = null;
        }

        status = ABORTED;

#if(!$transaction.lean)
        if(config.permanentListeners != null){
            notifyListeners(config.permanentListeners, TransactionLifecycleEvent.PostAbort);
        }

        if(normalListeners != null){
            notifyListeners(normalListeners, TransactionLifecycleEvent.PostAbort);
        }
#end
    }

    // ================== commit ===========================================

#if(${transaction.lean})
    @Override
    public final void commit() {
        if (status != ACTIVE && status != PREPARED) {
            switch (status) {
                case ABORTED:
                    throw new DeadTransactionException(
                        format("[%s] Can't commit an already aborted transaction", config.familyName));
                case COMMITTED:
                    return;
                default:
                    throw new IllegalStateException();
            }
        }

        if(abortOnly){
            throw abortOnWriteConflict();
        }
            
        Listeners listeners = null;
        if(attached != null){
            final boolean needsPrepare = status == ACTIVE && hasUpdates;
            if(config.dirtyCheck){
                if(needsPrepare && !doPrepareDirty()){
                    throw abortOnWriteConflict();
                }

                listeners = attached.owner.___commitDirty(attached, this, pool);
            }else{
                if(needsPrepare && !doPrepareAll()){
                    throw abortOnWriteConflict();
                }

                listeners = attached.owner.___commitAll(attached, this, pool);
            }
            attached = null;
        }

        status = COMMITTED;

        if(listeners != null){
            listeners.openAll(pool);
        }
    }
#else
    @Override
    public final void commit() {
        if(status == COMMITTED){
            return;
        }

        prepare();
        Listeners listeners = null;
        if (attached != null) {
            if(config.dirtyCheck){
                if(attached.isDirty == DIRTY_UNKNOWN){
                    attached.calculateIsDirty();
                }
                listeners = attached.owner.___commitDirty(attached, this, pool);
            }else{
                listeners = attached.owner.___commitAll(attached, this, pool);
            }
            attached = null;
        }
        status = COMMITTED;

        if(listeners != null){
            listeners.openAll(pool);
        }

        if(config.permanentListeners != null){
            notifyListeners(config.permanentListeners, TransactionLifecycleEvent.PostCommit);
        }

        if(normalListeners != null){
            notifyListeners(normalListeners, TransactionLifecycleEvent.PostCommit);
        }
    }
#end

    // ======================= prepare ============================

#if($transaction.lean)
    @Override
    public final void prepare() {
        if(status != ACTIVE){
            switch (status) {
                case PREPARED:
                    return;
                case ABORTED:
                    throw new DeadTransactionException(
                        format("[%s] Can't prepare already aborted transaction", config.familyName));
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("[%s] Can't prepare already committed transaction", config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        if(abortOnly){
            throw abortOnWriteConflict();
        }

        if(hasUpdates){
            if(config.dirtyCheck){
                if(!doPrepareDirty()){
                    throw abortOnWriteConflict();
                }
            }else{
                if(!doPrepareAll()){
                    throw abortOnWriteConflict();
                }
            }
        }

        status = PREPARED;
    }
#else
    @Override
    public final void prepare() {
        if(status != ACTIVE){
            switch (status) {
                case PREPARED:
                    return;
                case ABORTED:
                    throw new DeadTransactionException(
                        format("[%s] Can't prepare an already aborted transaction", config.familyName));
                case COMMITTED:
                    throw new DeadTransactionException(
                        format("[%s] Can't prepare an already committed transaction", config.familyName));
                default:
                    throw new IllegalStateException();
            }
        }

        boolean abort = true;
        try{
            if(config.permanentListeners != null){
                notifyListeners(config.permanentListeners, TransactionLifecycleEvent.PrePrepare);
            }

            if(normalListeners != null){
                notifyListeners(normalListeners, TransactionLifecycleEvent.PrePrepare);
            }

            if(abortOnly){
                throw abortOnWriteConflict();
            }
          
            if(hasUpdates){
                if(config.dirtyCheck){
                    if(!doPrepareDirty()){
                        throw abortOnWriteConflict();
                    }
                }else{
                    if(!doPrepareAll()){
                        throw abortOnWriteConflict();
                    }
                }
            }

            status = PREPARED;
            abort = false;
        }finally{
            if(abort){
                abort();
            }
        }
    }
#end

    private boolean doPrepareDirty(){
        if(config.writeLockMode==LOCKMODE_COMMIT){
            return true;
        }

        if(attached.isCommitted){
            return true;
        }

#if(!$transaction.lean)
        if(attached.isCommuting){
            Tranlocal read = attached.owner.___load(config.spinCount, this, LOCKMODE_COMMIT);

            if(read.isLocked){
                return false;
            }

            attached.read = read;
            attached.evaluateCommutingFunctions(pool);            
        }else
#end
        if (attached.calculateIsDirty()
                    && !attached.owner.___tryLockAndCheckConflict(this, config.spinCount, attached, true)){
            return false;
        }

        return true;
    }

    private boolean doPrepareAll(){
        if(config.writeLockMode==LOCKMODE_COMMIT){            
            return true;
        }
        
        if(attached.isCommitted){
            return true;
        }

#if(!$transaction.lean)
        if(attached.isCommuting){
            Tranlocal read = attached.owner.___load(config.spinCount, this, LOCKMODE_COMMIT);

            if(read.isLocked){
                return false;
            }

            attached.read = read;
            attached.evaluateCommutingFunctions(pool);
        }else
#end
        if(!attached.owner.___tryLockAndCheckConflict(this, config.spinCount, attached, true)){
            return false;
        }

        return true;
    }

    // ============================ registerChangeListenerAndAbort ===================

    @Override
    public final void registerChangeListenerAndAbort(final Latch listener) {
        if (status != ACTIVE) {
            throw abortOnFaultyStatusOfRegisterChangeListenerAndAbort();
        }

        if(!config.blockingAllowed){
            throw abortOnNoBlockingAllowed();
        }

        if( attached == null){
            throw abortOnNoRetryPossible();
        }

        final long listenerEra = listener.getEra();
        final BetaTransactionalObject owner = attached.owner;

        final boolean failure = owner.___registerChangeListener(listener, attached, pool, listenerEra)
                    == REGISTRATION_NONE;
        owner.___abort(this, attached, pool);
        attached = null;
        status = ABORTED;

#if(!$transaction.lean)
        if(config.permanentListeners != null){
            notifyListeners(config.permanentListeners, TransactionLifecycleEvent.PostAbort);
        }

        if(normalListeners != null){
            notifyListeners(normalListeners, TransactionLifecycleEvent.PostAbort);
        }

#end
        if(failure){
            throw abortOnNoRetryPossible();
        }
    }

    // =========================== init ================================

    @Override
    public void init(BetaTransactionConfiguration transactionConfig){
        if(transactionConfig == null){
            abort();
            throw new NullPointerException();
        }

        if(status == ACTIVE || status == PREPARED){
            abort();
        }

        this.config = transactionConfig;
        hardReset();
    }

    // ========================= reset ===============================

    @Override
    public boolean softReset() {
        if (status == ACTIVE || status == PREPARED) {
#if($transaction.lean)
            if(attached!=null){
                attached.owner.___abort(this, attached, pool);
            }
#else
            abort();
#end
        }

        if(attempt >= config.getMaxRetries()){
            return false;
        }

        status = ACTIVE;
        hasUpdates = false;
        attempt++;
        abortOnly = false;
#if(!$transaction.lean)
        evaluatingCommute = false;
        hasReads = false;
        hasUntrackedReads = false;
        if(normalListeners!=null){
            normalListeners.clear();
        }     
#end
        return true;
    }

    @Override
    public void hardReset(){
        if (status == ACTIVE || status == PREPARED) {
#if($transaction.lean)
            if(attached!=null){
                attached.owner.___abort(this, attached, pool);
            }
#else
            abort();
#end
        }

        hasUpdates = false;
        status = ACTIVE;
        abortOnly = false;        
        remainingTimeoutNs = config.timeoutNs;
        attempt = 1;
#if(!$transaction.lean)
        evaluatingCommute = false;
        hasReads = false;
        hasUntrackedReads = false;
        if(normalListeners !=null){
            pool.putArrayList(normalListeners);
            normalListeners = null;
        }
#end
    }

    // ================== orelse ============================

    @Override
    public final void startEitherBranch(){
#if($transaction.lean)
        config.needsOrelse();
        abort();
        throw SpeculativeConfigurationError.INSTANCE;
#else
        throw new TodoException();
#end
    }

    @Override
    public final void endEitherBranch(){
#if($transaction.lean)
        abort();
        throw new IllegalStateException();
#else
        throw new TodoException();
#end
    }

    @Override
    public final void startOrElseBranch(){
#if($transaction.lean)
        abort();
        throw new IllegalStateException();
#else
        throw new TodoException();
#end
    }
}

