package org.multiverse.stms.beta;

import org.multiverse.api.blocking.*;
import org.multiverse.api.exceptions.*;
import org.multiverse.stms.beta.transactionalobjects.*;
import org.multiverse.stms.beta.transactions.*;
import java.util.ArrayList;

/**
 * A pool for tranlocals. The pool is not threadsafe and should be connected to a thread (can
 * be stored in a threadlocal). Eventually the performance of the stm will be limited to the rate
 * of cleanup, and using a pool seriously improves scalability.
 * <p/>
 * Improvement: atm there is only one single type of tranlocal. If there are more types of tranlocals,
 * each class needs to have an index. This index can be used to determine the type of ref. If the pool
 * contains an array of arrays, where the first array is index based on the type of the ref, finding the
 * second array (that contains pooled tranlocals) can be found easily.
 * <p/>
 * ObjectPool is not thread safe and should not be shared between threads.
 *
 * This class is generated.
 *
 * @author Peter Veentjer
 */
public final class BetaTransactionPool {

    private final static boolean ENABLED = Boolean.parseBoolean(
        System.getProperty("org.multiverse.stm,beta.BetaObjectPool.enabled","true"));

    private final boolean transactionPoolingEnabled;

#foreach($transaction in $transactions)
    private final ${transaction.name}[] pool${transaction.name} = new ${transaction.name}[10];
    private int pool${transaction.name}Index = -1;
#end

    public BetaTransactionPool() {
        transactionPoolingEnabled = ENABLED;
    }

#foreach($transaction in $transactions)
    /**
     * Takes a ${transaction.name} from the pool.
     *
     * @return the taken ${transaction.name} or null of none available.
     */
    public ${transaction.name} take${transaction.name}(){
        if(!transactionPoolingEnabled || pool${transaction.name}Index == -1){
            return null;
        }

        ${transaction.name} tx = pool${transaction.name}[pool${transaction.name}Index];
        pool${transaction.name}[pool${transaction.name}Index]=null;
        pool${transaction.name}Index--;
        return tx;
    }

#end

    /**
     * Puts a BetaTransaction in the pool.
     *
     * todo: This is where the cleanup of the Transaction should be done..
     *
     * @param tx the BetaTransaction to put in the pool.
     * @throws NullPointerException if tx is null.
     */
    public void putBetaTransaction(BetaTransaction tx){
        if(tx == null){
            throw new NullPointerException();
        }

        if(!transactionPoolingEnabled){
            return;
        }

        switch(tx.getPoolTransactionType()){
#foreach($transaction in $transactions)
            case BetaTransaction.${transaction.poolName}:
            {
                if(pool${transaction.name}Index == pool${transaction.name}.length - 1){
                    return;
                }

                pool${transaction.name}Index++;
                pool${transaction.name}[pool${transaction.name}Index] = (${transaction.name})tx;
            }
            break;
#end
            default:
                throw new IllegalArgumentException();
        }
    }
}
