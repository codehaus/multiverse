package org.multiverse.stms.beta;

import org.multiverse.api.blocking.*;
import org.multiverse.api.exceptions.*;
import org.multiverse.stms.beta.refs.*;

/**
 * A pool for tranlocals. The pool is not threadsafe and should be connected to a thread (can
 * be stored in a threadlocal). Eventually the performance of the stm will be limited to the rate
 * of cleanup, and using a pool seriously improves scalability.
 * <p/>
 * Improvement: atm there is only one single type of tranlocal. If there are more types of tranlocals,
 * each class needs to have an index. This index can be used to determine the type of ref. If the pool
 * contains an array of arrays, where the first array is index based on the type of the ref, finding the
 * second array (that contains pooled tranlocals) can be found easily.
 * <p/>
 * ObjectPool is not thread safe and should not be shared between threads.
 *
 * This class is generated.
 *
 * @author Peter Veentjer
 */
public final class ObjectPool {


    private final boolean enabled;
    private final boolean arrayPoolingEnabled;
    private final boolean latchPoolingEnabled;
    private final boolean listenersPoolingEnabled;
#foreach($ref in $refs)
#if($ref.isSpecialization())
    private final ${ref.tranlocal}[] tranlocals${ref.name} = new ${ref.tranlocal}[100];
    private int lastUsed${ref.name} = -1;
#end    
#end
    private TranlocalPool[] pools = new TranlocalPool[1000];
    private CheapLatch[] cheapLatchPool = new CheapLatch[10];
    private int cheapLatchPoolIndex = -1;
    private Listeners[] listenersPool = new Listeners[1000];
    private int listenersPoolIndex = -1;

    public ObjectPool() {
        enabled = true;
        arrayPoolingEnabled = true;
        latchPoolingEnabled = true;
        listenersPoolingEnabled = true;
    }
#foreach($ref in $refs)
#if($ref.isSpecialization())

    /**
     * Takes a ${ref.tranlocal} from the pool for the specified ${ref.name}.
     *
     * @param owner the ${ref.name} to get the ${ref.tranlocal} for.     
     * @return the pooled tranlocal, or null if none is found.
     * @throws NullPointerException if owner is null.
     */
    public ${ref.tranlocal} take(final ${ref.name} owner) {
        if (owner == null) {
            throw new NullPointerException();
        }

        if (!enabled) {
            return null;
        }

        if (lastUsed${ref.name} == -1) {
            return null;
        }

        ${ref.tranlocal} tranlocal = tranlocals${ref.name}[lastUsed${ref.name}];
        tranlocal.owner = owner;
        tranlocals${ref.name}[lastUsed${ref.name}] = null;
        lastUsed${ref.name}--;
        return tranlocal;
    }

    /**
     * Puts an old ${ref.tranlocal} in this pool. If the tranlocal is allowed to be null,
     * the call is ignored. The same goes for when the tranlocal is permanent, since you
     * can't now how many transactions are still using it.
     *
     * @param tranlocal the ${ref.tranlocal} to pool.
     */
    public void put(final ${ref.tranlocal} tranlocal) {
        if (!enabled || tranlocal == null||tranlocal.isPermanent) {
            return;
        }

        if (lastUsed${ref.name} == tranlocals${ref.name}.length - 1) {
            return;
        }

        tranlocal.clean();
        lastUsed${ref.name}++;
        tranlocals${ref.name}[lastUsed${ref.name}] = tranlocal;
    }
#end
#end

    public Tranlocal take(final BetaTransactionalObject owner) {
        if (owner == null) {
            throw new NullPointerException();
        }

        if(!enabled){
            return null;
        }

        int classIndex = owner.getClassIndex();

        switch(classIndex){
#foreach($ref in $refs)
#if($ref.isSpecialization())
            case ${ref.classIndex}:
                return take((${ref.name})owner);
#end
#end
        }

        if(classIndex >= pools.length){
            return null;
        }

        TranlocalPool pool = pools[classIndex];
        if(pool.lastUsed == -1){
            return null;
        }

        Tranlocal tranlocal = pool.tranlocals[pool.lastUsed];
        tranlocal.owner = owner;
        pool.tranlocals[pool.lastUsed] = null;
        pool.lastUsed--;
        return tranlocal;
    }

    public void put(final Tranlocal tranlocal) {
        if (!enabled || tranlocal == null || tranlocal.isPermanent) {
            return;
        }

        BetaTransactionalObject owner = tranlocal.owner;
        int classIndex = owner.getClassIndex();

        switch(classIndex){
#foreach($ref in $refs)
#if($ref.isSpecialization())
            case ${ref.classIndex}:
                put((${ref.tranlocal})tranlocal);
                return;
#end
#end
        }

        if(classIndex >= pools.length){
            TranlocalPool[] newPools = new TranlocalPool[pools.length * 2];
            System.arraycopy(pools, 0, newPools, 0, pools.length);
            pools = newPools;
        }

        TranlocalPool pool = pools[classIndex];
        if(pool == null){
            pool = new TranlocalPool();
            pools[classIndex]=pool;
        }

        if(pool.lastUsed == pool.tranlocals.length - 1){
            return;
        }

        tranlocal.clean();
        pool.lastUsed++;
        pool.tranlocals[pool.lastUsed] = tranlocal;
    }

    static class TranlocalPool{
        int lastUsed = -1;
        Tranlocal[] tranlocals = new Tranlocal[100];
    }

    private Tranlocal[][] tranlocalArrayPool = new Tranlocal[8193][];

    public void putTranlocalArray(final Tranlocal[] array){
        if(array == null){
            throw new NullPointerException();
        }

        if(!arrayPoolingEnabled){
            return;
        }

        if(array.length-1>tranlocalArrayPool.length){
            return;
        }

        int index = array.length;

        if(tranlocalArrayPool[index]!=null){
            return;
        }

        //lets clean the array
        for(int k=0;k<array.length;k++){
            array[k]=null;
        }

        tranlocalArrayPool[index]=array;
    }

    /**
     * Takes a tranlocal array from the pool
     */
    public Tranlocal[] takeTranlocalArray(final int size){
        if(size<0){
            throw new IllegalArgumentException();
        }

        if(!arrayPoolingEnabled){
            return null;
        }

        int index = size;

        if(index>=tranlocalArrayPool.length){
            return null;
        }

        if(tranlocalArrayPool[index]==null){
            return null;
        }

        Tranlocal[] array = tranlocalArrayPool[index];
        tranlocalArrayPool[index]=null;
        return array;
    }

    public CheapLatch takeCheapLatch(){
        if(!latchPoolingEnabled || cheapLatchPoolIndex == -1){
            return null;
        }

        CheapLatch latch = cheapLatchPool[cheapLatchPoolIndex];
        cheapLatchPool[cheapLatchPoolIndex]=null;
        cheapLatchPoolIndex--;
        return latch;
    }

    public void putCheapLatch(CheapLatch latch){
        if(latch == null){
            throw new NullPointerException();
        }

        if(!latchPoolingEnabled || cheapLatchPoolIndex == cheapLatchPool.length-1){
            return;
        }

        latch.reset();
        cheapLatchPoolIndex++;
        cheapLatchPool[cheapLatchPoolIndex]=latch;        
    }

    public Listeners takeListeners(){
        if(!listenersPoolingEnabled || listenersPoolIndex == -1){
            return null;
        }

        Listeners listeners = listenersPool[listenersPoolIndex];
        listenersPool[listenersPoolIndex]=null;
        listenersPoolIndex--;
        return listeners;
    }

    public void putListeners(Listeners listeners){
        if(listeners == null){
            throw new NullPointerException();
        }

        if(!listenersPoolingEnabled || listenersPoolIndex == listenersPool.length-1){
            return;
        }

        listeners.reset();
        listenersPoolIndex++;
        listenersPool[listenersPoolIndex]=listeners;
    }
}
