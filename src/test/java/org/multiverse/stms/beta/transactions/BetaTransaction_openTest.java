package org.multiverse.stms.beta.transactions;

import org.junit.Before;
import org.junit.Test;
import org.multiverse.api.exceptions.DeadTransactionException;
import org.multiverse.api.exceptions.PreparedTransactionException;
import org.multiverse.api.exceptions.StmMismatchException;
import org.multiverse.stms.beta.BetaStm;
import org.multiverse.stms.beta.transactionalobjects.BetaLongRef;
import org.multiverse.stms.beta.transactionalobjects.BetaLongRefTranlocal;
import org.multiverse.stms.beta.transactionalobjects.BetaTranlocal;

import static org.junit.Assert.*;
import static org.multiverse.TestUtils.assertIsAborted;
import static org.multiverse.TestUtils.assertIsCommitted;
import static org.multiverse.stms.beta.BetaStmTestUtils.*;
import static org.multiverse.stms.beta.orec.OrecTestUtils.assertSurplus;

public abstract class BetaTransaction_openTest {
    protected BetaStm stm;

    @Before
    public void setUp() {
        stm = new BetaStm();
    }

    public abstract BetaTransaction newTransaction();


    @Test
    public void whenCommittedBefore() {
        BetaLongRef ref = newLongRef(stm);

        BetaTransaction tx = newTransaction();

        BetaLongRefTranlocal tranlocal = tx.open(ref);
    }

    @Test
    public void whenPrivatizedByOther_thenOpenStillSucceeds(){

    }

    @Test
    public void whenEnsuredByOther_thenOpenStillSucceeds(){

    }

    @Test
    public void whenNotOpenedBefore() {
        long initialValue = 10;
        BetaLongRef ref = newLongRef(stm, initialValue);
        long initialVersion = ref.getVersion();

        BetaTransaction tx = newTransaction();
        BetaTranlocal tranlocal = tx.open(ref);

        assertNotNull(tranlocal);
        assertSame(tx, tranlocal.tx);
        assertSame(ref, tranlocal.owner);
        assertTrue(tranlocal.isNew());
    }

    @Test
    public void whenOpenedBefore() {
        long initialValue = 10;
        BetaLongRef ref = newLongRef(stm, initialValue);
        long initialVersion = ref.getVersion();

        BetaTransaction tx = newTransaction();
        BetaTranlocal first = tx.open(ref);
        BetaTranlocal tranlocal = tx.open(ref);

        assertSame(first, tranlocal);
        assertSame(tx, tranlocal.tx);
        assertSame(ref, tranlocal.owner);
        assertTrue(tranlocal.isNew());
    }

    @Test
    public void whenStmMismatch() {
        long initialValue = 10;
        BetaLongRef ref = newLongRef(new BetaStm(), initialValue);
        long initialVersion = ref.getVersion();

        BetaTransaction tx = newTransaction();
        try {
            tx.open(ref);
            fail();
        } catch (StmMismatchException expected) {

        }

        assertIsAborted(tx);
        assertVersionAndValue(ref, initialVersion, initialValue);
        assertRefHasNoLocks(ref);
    }

    @Test
    public void whenNullReference_thenNullPointerException() {
        BetaTransaction tx = newTransaction();
        try {
            tx.open((BetaLongRef) null);
            fail();
        } catch (NullPointerException expected) {

        }

        assertIsAborted(tx);
    }

    @Test
    public void state_whenAlreadyPrepared_thenPreparedTransactionException() {
        long initialValue = 10;
        BetaLongRef ref = newLongRef(stm, initialValue);
        long initialVersion = ref.getVersion();

        BetaTransaction tx = newTransaction();
        tx.prepare();

        try {
            tx.open(ref);
            fail();
        } catch (PreparedTransactionException expected) {
        }

        assertVersionAndValue(ref, initialVersion, initialValue);
        assertIsAborted(tx);
        assertRefHasNoLocks(ref);
        assertSurplus(0, ref);
    }

    @Test
    public void state_whenAlreadyCommitted_thenDeadTransactionException() {
        long initialValue = 10;
        BetaLongRef ref = newLongRef(stm, initialValue);
        long initialVersion = ref.getVersion();

        BetaTransaction tx = newTransaction();
        tx.commit();

        try {
            tx.open(ref);
            fail();
        } catch (DeadTransactionException expected) {
        }

        assertVersionAndValue(ref, initialVersion, initialValue);
        assertIsCommitted(tx);
        assertRefHasNoLocks(ref);
        assertSurplus(0, ref);
    }

    @Test
    public void state_whenAlreadyAborted_thenDeadTransactionException() {
        long initialValue = 10;
        BetaLongRef ref = newLongRef(stm, initialValue);
        long initialVersion = ref.getVersion();

        BetaTransaction tx = newTransaction();
        tx.abort();

        try {
            tx.open(ref);
            fail();
        } catch (DeadTransactionException expected) {
        }

        assertVersionAndValue(ref, initialVersion, initialValue);
        assertIsAborted(tx);
        assertRefHasNoLocks(ref);
        assertSurplus(0, ref);
    }
}
